2023-04-23 17:51:41 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 17:53:08 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 17:53:59 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 17:54:59 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 17:55:17 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 17:58:35 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 17:59:10 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 18:01:29 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 18:02:22 DEBUG [main]: - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-04-23 18:02:28 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-04-23 18:02:28 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-04-23 18:02:28 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-23 18:02:39 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-23 18:02:40 INFO  [http-nio-8080-exec-6]: - Entered /registration
2023-04-23 18:13:59 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-23 18:14:31 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-23 18:20:36 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-04-23 18:20:36 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-23 18:20:41 INFO  [http-nio-8080-exec-4]: - Entered /user/profile
2023-04-23 18:20:41 INFO  [http-nio-8080-exec-4]: - find user by login = null
2023-04-23 18:22:29 INFO  [http-nio-8080-exec-3]: - Entered /user/profile
2023-04-23 18:22:29 INFO  [http-nio-8080-exec-3]: - find user by login = null
2023-04-23 18:23:19 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-04-23 18:23:24 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-23 18:23:25 INFO  [http-nio-8080-exec-2]: - user was logged successfully
2023-04-23 18:23:25 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-23 18:23:26 INFO  [http-nio-8080-exec-5]: - Entered /user/profile
2023-04-23 18:23:26 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-04-23 18:27:33 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-04-23 18:27:40 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-04-23 18:27:40 INFO  [http-nio-8080-exec-5]: - user was logged successfully
2023-04-23 18:27:40 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-23 18:27:42 INFO  [http-nio-8080-exec-4]: - Entered /user/profile
2023-04-23 18:27:42 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-04-23 18:27:48 INFO  [http-nio-8080-exec-3]: - Entered /user/purchases
2023-04-23 18:27:48 INFO  [http-nio-8080-exec-3]: - find user by login = user
2023-04-23 18:27:51 INFO  [http-nio-8080-exec-6]: - Enter /user/top/topUP
2023-04-23 18:27:51 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-04-23 18:28:34 INFO  [http-nio-8080-exec-7]: - Entered /login
2023-04-23 18:28:38 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-04-23 18:28:38 INFO  [http-nio-8080-exec-8]: - user was logged successfully
2023-04-23 18:28:38 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-04-23 18:28:39 INFO  [http-nio-8080-exec-10]: - Enter /user/top/topUP
2023-04-23 18:28:39 INFO  [http-nio-8080-exec-10]: - find user by login = user
2023-04-23 18:30:49 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-04-23 18:30:54 INFO  [http-nio-8080-exec-1]: - find user by login = user
2023-04-23 18:30:54 INFO  [http-nio-8080-exec-1]: - user was logged successfully
2023-04-23 18:30:54 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-23 18:30:56 INFO  [http-nio-8080-exec-5]: - Entered /user/profile
2023-04-23 18:30:56 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-04-23 18:30:58 INFO  [http-nio-8080-exec-6]: - Enter /user/topUP
2023-04-23 18:30:58 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-04-23 18:31:00 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-04-23 18:31:01 INFO  [http-nio-8080-exec-7]: - account was replenished successfully, account+=22
2023-04-23 18:31:01 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-23 18:31:02 INFO  [http-nio-8080-exec-8]: - Entered /user/profile
2023-04-23 18:31:02 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-04-23 18:37:55 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-23 18:38:01 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-23 18:38:03 INFO  [http-nio-8080-exec-4]: - Entered /registration
2023-04-23 18:39:36 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-23 18:39:42 INFO  [http-nio-8080-exec-1]: - Entered /user/profile
2023-04-23 18:39:42 INFO  [http-nio-8080-exec-1]: - find user by login = null
2023-04-23 18:39:46 INFO  [http-nio-8080-exec-4]: - Entered /login
2023-04-23 18:39:50 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-23 18:39:50 INFO  [http-nio-8080-exec-2]: - user was logged successfully
2023-04-23 18:39:50 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-23 18:39:52 INFO  [http-nio-8080-exec-7]: - Entered /user/profile
2023-04-23 18:39:52 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-04-23 18:39:55 INFO  [http-nio-8080-exec-5]: - Entered /user/purchases
2023-04-23 18:39:55 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-04-23 18:39:57 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-04-23 18:44:45 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-04-23 18:44:48 INFO  [http-nio-8080-exec-6]: - Entered /login
2023-04-23 18:44:52 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-23 18:44:53 INFO  [http-nio-8080-exec-2]: - user was logged successfully
2023-04-23 18:44:53 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-23 18:44:55 INFO  [http-nio-8080-exec-4]: - Entered /user/profile
2023-04-23 18:44:55 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-04-23 18:44:56 INFO  [http-nio-8080-exec-5]: - Entered /user/profile
2023-04-23 18:44:56 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-04-23 18:44:57 INFO  [http-nio-8080-exec-7]: - Entered /user/purchases
2023-04-23 18:44:57 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-04-23 18:44:59 INFO  [http-nio-8080-exec-8]: - Enter /user/topUP
2023-04-23 18:44:59 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-04-23 21:22:45 INFO  [main]: - Entered /registration
2023-04-23 21:23:36 INFO  [main]: - Entered /registration
2023-04-23 21:24:04 INFO  [main]: - Entered /registration
2023-04-23 21:39:23 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-04-23 21:39:23 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-23 21:41:26 INFO  [main]: - Entered /registration
2023-04-23 21:42:56 INFO  [main]: - Entered /registration
2023-04-23 21:53:40 INFO  [main]: - Entered /registration
2023-04-23 22:02:10 INFO  [main]: - Entered /registration
2023-04-23 22:49:46 INFO  [main]: - Entered /registration
2023-04-23 22:50:29 INFO  [main]: - Entered /registration
2023-04-23 22:51:15 INFO  [main]: - Entered /registration
2023-04-23 22:51:49 INFO  [main]: - Entered /registration
2023-04-24 09:29:20 INFO  [main]: - Entered /registration
2023-04-24 09:30:42 INFO  [main]: - Entered /registration
2023-04-24 09:31:13 INFO  [main]: - Entered /registration
2023-04-24 09:35:21 INFO  [main]: - Entered /registration
2023-04-24 09:37:33 INFO  [main]: - find user by login = user5
2023-04-24 09:38:34 INFO  [main]: - find user by login = user5
2023-04-24 09:44:58 INFO  [main]: - find user by login = user5
2023-04-24 09:47:25 INFO  [main]: - find user by login = user5
2023-04-24 09:47:42 INFO  [main]: - find user by login = user5
2023-04-24 09:48:21 INFO  [main]: - find user by login = user5
2023-04-24 09:50:04 INFO  [main]: - Entered /registration
2023-04-24 09:50:22 INFO  [main]: - Entered /registration
2023-04-24 10:12:56 INFO  [main]: - Entered /registration
2023-04-24 10:13:34 INFO  [main]: - Entered /registration
2023-04-24 10:17:00 INFO  [main]: - Entered /registration
2023-04-24 10:18:21 INFO  [main]: - Entered /registration
2023-04-24 10:18:37 INFO  [main]: - Entered /registration
2023-04-24 10:18:57 INFO  [main]: - Entered /registration
2023-04-24 10:23:14 INFO  [main]: - Entered /registration
2023-04-24 11:06:09 INFO  [main]: - Entered /registration
2023-04-24 11:06:33 INFO  [main]: - Entered /registration
2023-04-24 11:07:10 INFO  [main]: - Entered /registration
2023-04-24 11:07:48 INFO  [main]: - find user by login = user5
2023-04-24 11:12:44 INFO  [main]: - find user by login = user5
2023-04-24 11:12:45 INFO  [main]: - addedorg.example.ukrflix.models.User@6a97517
2023-04-24 11:12:45 INFO  [main]: - user was added successfully
2023-04-24 11:12:45 INFO  [main]: - redirect /login
2023-04-24 11:22:38 INFO  [main]: - find user by login = user5
2023-04-24 11:24:06 INFO  [main]: - Entered /registration
2023-04-24 11:38:35 INFO  [main]: - Entered /registration
2023-04-24 11:39:34 INFO  [main]: - user was added successfully
2023-04-24 11:39:34 INFO  [main]: - redirect /login
2023-04-24 11:39:57 INFO  [main]: - user was added successfully
2023-04-24 11:39:57 INFO  [main]: - redirect /login
2023-04-24 11:40:40 INFO  [main]: - Entered /registration
2023-04-24 11:40:52 INFO  [main]: - user was added successfully
2023-04-24 11:40:52 INFO  [main]: - redirect /login
2023-04-24 11:41:37 INFO  [main]: - Entered /registration
2023-04-24 12:08:02 INFO  [main]: - addedorg.example.ukrflix.models.User@907f2b7
2023-04-24 12:09:49 INFO  [main]: - find user by login = user
2023-04-24 12:15:58 INFO  [main]: - update user id:2
2023-04-24 12:55:26 INFO  [main]: - Entered /registration
2023-04-24 12:56:25 INFO  [main]: - Entered /registration
2023-04-24 12:56:46 INFO  [main]: - Entered /registration
2023-04-24 12:57:04 INFO  [main]: - Entered /registration
2023-04-24 13:19:07 INFO  [main]: - Entered /registration
2023-04-24 13:19:59 INFO  [main]: - Entered /registration
2023-04-24 13:25:48 INFO  [main]: - Entered /registration
2023-04-24 13:28:34 INFO  [main]: - user was added successfully
2023-04-24 13:28:34 INFO  [main]: - redirect /login
2023-04-24 13:29:05 INFO  [main]: - user was added successfully
2023-04-24 13:29:05 INFO  [main]: - redirect /login
2023-04-24 13:29:26 INFO  [main]: - Entered /registration
2023-04-24 13:29:46 INFO  [main]: - Entered /registration
2023-04-24 13:30:12 INFO  [main]: - Entered /registration
2023-04-24 19:38:49 INFO  [main]: - Entered /registration
2023-04-24 19:41:00 INFO  [main]: - user was added successfully
2023-04-24 19:41:00 INFO  [main]: - redirect /login
2023-04-24 19:41:48 INFO  [main]: - user was added successfully
2023-04-24 19:41:48 INFO  [main]: - redirect /login
2023-04-24 19:42:29 INFO  [main]: - Entered /registration
2023-04-24 19:42:56 INFO  [main]: - Entered /registration
2023-04-24 19:50:01 INFO  [main]: - Entered /registration
2023-04-24 19:51:29 INFO  [main]: - Entered /registration
2023-04-24 19:52:20 INFO  [main]: - user was added successfully
2023-04-24 19:52:20 INFO  [main]: - redirect /login
2023-04-24 20:00:04 INFO  [main]: - Entered /registration
2023-04-24 20:03:53 INFO  [main]: - Entered /registration
2023-04-24 20:07:20 INFO  [main]: - user was added successfully
2023-04-24 20:07:20 INFO  [main]: - redirect /login
2023-04-24 20:08:38 INFO  [main]: - user was added successfully
2023-04-24 20:08:38 INFO  [main]: - redirect /login
2023-04-24 20:09:06 INFO  [main]: - find user by login = user5
2023-04-24 20:09:06 INFO  [main]: - addedorg.example.ukrflix.models.User@6b94c200
2023-04-24 20:09:06 INFO  [main]: - user was added successfully
2023-04-24 20:09:06 INFO  [main]: - redirect /login
2023-04-24 20:09:25 INFO  [main]: - Entered /registration
2023-04-24 20:12:06 INFO  [main]: - find user by login = user5
2023-04-24 20:13:30 INFO  [main]: - Entered /registration
2023-04-24 20:14:59 INFO  [main]: - Entered /registration
2023-04-24 20:15:19 INFO  [main]: - find user by login = user5
2023-04-24 20:17:52 INFO  [main]: - user was added successfully
2023-04-24 20:17:52 INFO  [main]: - redirect /login
2023-04-24 23:11:28 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-04-24 23:11:28 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-24 23:11:32 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-24 23:15:36 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-04-24 23:15:40 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-04-24 23:15:44 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-04-24 23:15:45 INFO  [http-nio-8080-exec-5]: - Entered /login
2023-04-24 23:16:23 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-04-24 23:16:24 INFO  [http-nio-8080-exec-9]: - Entered /login
2023-04-24 23:16:30 INFO  [http-nio-8080-exec-10]: - Entered /login
2023-04-24 23:16:32 INFO  [http-nio-8080-exec-3]: - find user by login = 
2023-04-24 23:16:32 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-04-24 23:16:36 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-24 23:16:36 INFO  [http-nio-8080-exec-2]: - user was logged successfully
2023-04-24 23:16:36 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-24 23:16:44 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-04-24 23:16:44 INFO  [http-nio-8080-exec-6]: - Entered /login
2023-04-24 23:17:12 INFO  [http-nio-8080-exec-1]: - find user by login = user
2023-04-24 23:17:12 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-04-25 10:59:17 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-04-25 10:59:17 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-25 10:59:33 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-25 11:02:26 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-25 11:02:30 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-25 11:02:38 INFO  [http-nio-8080-exec-8]: - Entered /user/purchases
2023-04-25 11:02:38 INFO  [http-nio-8080-exec-8]: - find user by login = null
2023-04-25 11:02:45 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-25 11:02:56 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-04-25 11:02:57 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-04-25 11:03:01 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-25 11:53:52 INFO  [http-nio-8080-exec-6]: - Redirect from / to the /catalog path
2023-04-25 11:53:52 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-25 11:56:08 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-04-25 11:56:08 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-25 11:56:11 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-25 11:57:49 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-25 12:00:22 INFO  [http-nio-8080-exec-2]: - Enter /user/topUP
2023-04-25 12:00:22 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-25 12:00:27 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-25 12:02:43 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-04-25 12:15:58 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-25 23:24:43 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-04-25 23:24:43 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-25 23:32:44 INFO  [http-nio-8080-exec-5]: - Entered /registration
2023-04-25 23:34:40 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-25 23:58:44 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-04-25 23:59:32 INFO  [http-nio-8080-exec-8]: - deleted successfully
2023-04-25 23:59:38 INFO  [http-nio-8080-exec-10]: - deleted successfully
2023-04-26 00:00:48 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-04-26 09:37:54 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-04-26 09:38:00 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-26 09:42:01 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-26 10:27:28 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-04-26 10:27:35 INFO  [http-nio-8080-exec-8]: - actor id = 1 was added successfully
2023-04-26 22:11:03 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 22:11:16 INFO  [http-nio-8080-exec-1]: - find user by login = aa
2023-04-26 22:20:10 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:21:05 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 22:23:57 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:30:28 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:36:41 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 22:36:44 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:37:15 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:38:46 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-26 22:47:24 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:54:03 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 22:54:57 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 23:01:08 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:03:48 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:04:52 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:06:16 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:06:19 INFO  [http-nio-8080-exec-2]: - find user by login = 
2023-04-26 23:06:24 INFO  [http-nio-8080-exec-3]: - find user by login = 
2023-04-26 23:07:54 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:08:26 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:08:29 INFO  [http-nio-8080-exec-4]: - find user by login = 
2023-04-26 23:09:13 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:16:31 INFO  [http-nio-8080-exec-1]: - find user by login = 
2023-04-26 23:17:54 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 23:18:43 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 23:21:33 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:25:43 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-26 23:25:48 INFO  [http-nio-8080-exec-2]: - find user by login = 
2023-04-26 23:27:44 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:27:47 INFO  [http-nio-8080-exec-4]: - find user by login = 
2023-04-26 23:28:27 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-26 23:29:09 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-26 23:29:11 INFO  [http-nio-8080-exec-2]: - find user by login = 
2023-04-26 23:31:09 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 09:51:47 INFO  [http-nio-8080-exec-5]: - Redirect from / to the /catalog path
2023-04-27 09:51:47 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-27 09:51:59 INFO  [http-nio-8080-exec-7]: - Entered /registration
2023-04-27 09:52:44 INFO  [http-nio-8080-exec-1]: - find user by login = 
2023-04-27 10:05:53 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-04-27 10:05:53 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-27 10:05:59 INFO  [http-nio-8080-exec-6]: - Entered /registration
2023-04-27 10:06:03 INFO  [http-nio-8080-exec-7]: - find user by login = 
2023-04-27 10:06:21 INFO  [http-nio-8080-exec-8]: - find user by login = 
2023-04-27 10:06:25 INFO  [http-nio-8080-exec-9]: - find user by login = 
2023-04-27 10:06:30 INFO  [http-nio-8080-exec-10]: - find user by login = 
2023-04-27 10:07:10 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 10:07:13 INFO  [http-nio-8080-exec-2]: - find user by login = 
2023-04-27 10:08:31 INFO  [http-nio-8080-exec-4]: - Entered /registration
2023-04-27 10:08:34 INFO  [http-nio-8080-exec-5]: - find user by login = 
2023-04-27 10:08:48 INFO  [http-nio-8080-exec-6]: - Entered /registration
2023-04-27 10:09:27 INFO  [http-nio-8080-exec-5]: - find user by login = 
2023-04-27 10:09:31 INFO  [http-nio-8080-exec-2]: - find user by login = 
2023-04-27 10:10:51 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 10:10:57 INFO  [http-nio-8080-exec-2]: - find user by login = 
2023-04-27 10:21:58 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 10:22:03 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-27 10:22:16 INFO  [http-nio-8080-exec-4]: - find user by login = aa
2023-04-27 10:22:22 INFO  [http-nio-8080-exec-5]: - find user by login = aa
2023-04-27 10:24:40 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 10:26:21 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 10:26:25 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-04-27 10:27:54 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-27 10:28:12 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-27 10:29:53 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-04-27 11:03:26 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-04-27 11:04:28 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-27 11:04:57 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-27 11:07:12 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-27 11:07:20 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-04-27 11:15:38 INFO  [http-nio-8080-exec-3]: - Entered /registration
2023-04-27 11:15:47 INFO  [http-nio-8080-exec-6]: - Entered /new_film
2023-04-27 11:15:49 INFO  [http-nio-8080-exec-7]: - Entered /registration
2023-04-27 11:17:24 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-27 11:17:26 INFO  [http-nio-8080-exec-3]: - Entered /new_film
2023-04-27 11:17:30 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-04-27 11:17:31 INFO  [http-nio-8080-exec-4]: - Entered /new_film
2023-04-27 11:19:25 INFO  [http-nio-8080-exec-6]: - Entered /user/purchases
2023-04-27 11:19:25 INFO  [http-nio-8080-exec-6]: - find user by login = null
2023-04-27 11:19:31 INFO  [http-nio-8080-exec-7]: - Entered /login
2023-04-27 11:19:57 INFO  [http-nio-8080-exec-9]: - find user by login = user
2023-04-27 11:19:57 INFO  [http-nio-8080-exec-9]: - user was logged successfully
2023-04-27 11:19:57 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-04-27 11:19:59 INFO  [http-nio-8080-exec-1]: - Entered /user/purchases
2023-04-27 11:19:59 INFO  [http-nio-8080-exec-1]: - find user by login = user
2023-04-27 11:20:02 INFO  [http-nio-8080-exec-3]: - Entered /user/purchases
2023-04-27 11:20:02 INFO  [http-nio-8080-exec-3]: - find user by login = user
2023-04-27 11:20:18 INFO  [http-nio-8080-exec-2]: - Enter /user/topUP
2023-04-27 11:20:18 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-27 11:21:53 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-04-27 11:21:53 INFO  [http-nio-8080-exec-1]: - Enter /user/topUP
2023-04-27 11:21:53 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-27 11:21:53 INFO  [http-nio-8080-exec-1]: - find user by login = null
2023-04-27 11:22:00 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-04-27 11:22:05 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-27 11:22:08 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-27 11:22:11 INFO  [http-nio-8080-exec-6]: - Entered /login
2023-04-27 11:22:24 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-04-27 11:22:24 INFO  [http-nio-8080-exec-7]: - user was logged successfully
2023-04-27 11:22:24 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-04-27 11:44:26 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-27 12:24:00 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-27 12:24:09 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-27 12:24:30 INFO  [http-nio-8080-exec-4]: - Enter /user/topUP
2023-04-27 12:24:30 INFO  [http-nio-8080-exec-4]: - find user by login = null
2023-04-27 12:24:35 INFO  [http-nio-8080-exec-5]: - Entered /user/purchases
2023-04-27 12:24:35 INFO  [http-nio-8080-exec-5]: - find user by login = null
2023-04-27 12:24:37 INFO  [http-nio-8080-exec-2]: - Enter /user/topUP
2023-04-27 12:24:37 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-27 12:24:38 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-27 12:24:39 INFO  [http-nio-8080-exec-8]: - Enter /user/topUP
2023-04-27 12:24:39 INFO  [http-nio-8080-exec-8]: - find user by login = null
2023-04-27 12:24:41 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-04-27 12:24:45 INFO  [http-nio-8080-exec-10]: - find user by login = user
2023-04-27 12:24:45 INFO  [http-nio-8080-exec-10]: - user was logged successfully
2023-04-27 12:24:45 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-27 12:24:45 INFO  [http-nio-8080-exec-6]: - Entered /user/purchases
2023-04-27 12:24:45 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-04-27 12:24:47 INFO  [http-nio-8080-exec-9]: - Enter /user/topUP
2023-04-27 12:24:47 INFO  [http-nio-8080-exec-9]: - find user by login = user
2023-04-27 12:24:48 INFO  [http-nio-8080-exec-4]: - Entered /user/purchases
2023-04-27 12:24:48 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-04-27 12:24:49 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-27 12:24:50 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-04-27 12:24:50 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-27 12:24:56 INFO  [http-nio-8080-exec-7]: - Enter /user/topUP
2023-04-27 12:24:56 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-04-27 12:25:00 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-04-27 12:25:03 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-27 12:25:04 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-04-27 12:39:36 INFO  [http-nio-8080-exec-1]: - get all actors
2023-04-27 12:40:05 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-04-27 12:46:18 INFO  [http-nio-8080-exec-1]: - get all actors
2023-04-27 12:46:20 INFO  [http-nio-8080-exec-4]: - get all actors
2023-04-27 12:47:02 INFO  [http-nio-8080-exec-1]: - get all actors
2023-04-27 12:47:06 INFO  [http-nio-8080-exec-2]: - get all actors
2023-04-27 12:47:16 INFO  [http-nio-8080-exec-4]: - get all actor by id
2023-04-27 12:47:20 INFO  [http-nio-8080-exec-5]: - get all actor by id
2023-04-27 22:14:05 INFO  [http-nio-8080-exec-3]: - Redirect from / to the /catalog path
2023-04-27 22:14:06 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-27 22:14:17 INFO  [http-nio-8080-exec-4]: - deleted successfully
2023-04-27 22:14:33 INFO  [http-nio-8080-exec-9]: - actor id = 1 was added successfully
2023-04-27 22:15:55 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-04-27 22:16:08 INFO  [http-nio-8080-exec-6]: - actor id = 1 was added successfully
2023-04-27 22:21:46 INFO  [http-nio-8080-exec-6]: - deleted successfully
2023-04-27 22:23:06 INFO  [http-nio-8080-exec-4]: - actor id = 1 was added successfully
2023-04-27 22:25:04 INFO  [http-nio-8080-exec-8]: - Entered /login
2023-04-27 22:25:09 INFO  [http-nio-8080-exec-9]: - find user by login = user
2023-04-27 22:25:10 INFO  [http-nio-8080-exec-9]: - user was logged successfully
2023-04-27 22:25:10 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-04-27 22:25:12 INFO  [http-nio-8080-exec-1]: - Entered /user/purchases
2023-04-27 22:25:12 INFO  [http-nio-8080-exec-1]: - find user by login = user
2023-04-28 09:00:29 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-04-28 09:00:29 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-28 09:01:41 INFO  [http-nio-8080-exec-3]: - Entered /new_film
2023-04-28 09:03:59 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:08:05 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:08:36 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:39:11 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-04-28 09:39:17 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:42:24 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-04-28 09:43:16 INFO  [http-nio-8080-exec-5]: - entered /newActor
2023-04-28 09:45:06 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-04-28 09:45:12 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-28 09:45:35 INFO  [http-nio-8080-exec-8]: - Entered /new_film
2023-04-28 09:50:40 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:51:55 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:56:44 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 09:57:34 INFO  [http-nio-8080-exec-4]: - entered /newActor
2023-04-28 10:00:30 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-04-28 10:04:12 INFO  [http-nio-8080-exec-5]: - Film aa was added
2023-04-28 10:04:12 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-28 10:13:41 INFO  [http-nio-8080-exec-1]: - Film aa was added
2023-04-28 10:13:41 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 10:14:41 INFO  [http-nio-8080-exec-5]: - Film ÑÑ was added
2023-04-28 10:14:41 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-28 10:15:46 INFO  [http-nio-8080-exec-8]: - Film ÑÑ was added
2023-04-28 10:15:46 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-04-28 10:18:45 INFO  [http-nio-8080-exec-1]: - Film ÑÑ was added
2023-04-28 10:18:45 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 10:19:15 INFO  [http-nio-8080-exec-3]: - Entered /new_film
2023-04-28 10:26:19 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-04-28 10:31:46 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-28 10:35:04 INFO  [http-nio-8080-exec-7]: - entered /newActor
2023-04-28 10:40:57 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-04-28 10:53:52 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-04-28 11:00:53 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 11:00:53 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-04-28 11:01:41 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 11:01:44 INFO  [http-nio-8080-exec-5]: - Entered /user/purchases
2023-04-28 11:01:44 INFO  [http-nio-8080-exec-5]: - find user by login = null
2023-04-28 11:04:50 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-04-28 11:04:50 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-28 11:06:23 INFO  [http-nio-8080-exec-1]: - Entered /user/purchases
2023-04-28 11:06:23 INFO  [http-nio-8080-exec-1]: - find user by login = null
2023-04-28 11:09:18 INFO  [http-nio-8080-exec-1]: - Entered /user/purchases
2023-04-28 11:09:18 INFO  [http-nio-8080-exec-1]: - find user by login = null
2023-04-28 11:11:10 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-04-28 11:11:10 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-28 11:11:15 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-28 11:34:05 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-04-28 11:34:07 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-28 11:34:08 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-28 11:34:10 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-04-28 11:34:53 INFO  [main]: - Entered /registration
2023-04-28 12:14:42 INFO  [main]: - addedorg.example.ukrflix.models.User@2234078
2023-04-28 12:14:42 INFO  [main]: - update user id:2
2023-04-28 12:14:42 INFO  [main]: - find user by login = user
2023-04-28 12:29:10 INFO  [main]: - addedorg.example.ukrflix.models.User@779de014
2023-04-28 12:29:10 INFO  [main]: - update user id:2
2023-04-28 12:29:10 INFO  [main]: - find user by login = user
2023-04-28 12:33:12 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 12:33:12 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-28 12:33:23 INFO  [http-nio-8080-exec-3]: - Entered /user/purchases
2023-04-28 12:33:23 INFO  [http-nio-8080-exec-3]: - find user by login = null
2023-04-28 12:33:23 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-28 12:33:26 INFO  [http-nio-8080-exec-5]: - Enter /user/topUP
2023-04-28 12:33:26 INFO  [http-nio-8080-exec-5]: - find user by login = null
2023-04-28 12:33:28 INFO  [http-nio-8080-exec-6]: - Entered /user/purchases
2023-04-28 12:33:28 INFO  [http-nio-8080-exec-6]: - find user by login = null
2023-04-28 12:33:28 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-28 12:33:29 INFO  [http-nio-8080-exec-8]: - Entered /user/purchases
2023-04-28 12:33:29 INFO  [http-nio-8080-exec-8]: - find user by login = null
2023-04-28 12:33:29 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-04-28 12:33:32 INFO  [http-nio-8080-exec-10]: - Entered /user/purchases
2023-04-28 12:33:32 INFO  [http-nio-8080-exec-10]: - find user by login = null
2023-04-28 12:33:32 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-28 12:33:32 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-04-28 12:33:32 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-28 12:33:32 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-28 12:34:30 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-28 12:34:33 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-04-28 12:34:33 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-04-28 12:34:33 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-04-28 12:34:35 INFO  [http-nio-8080-exec-4]: - Enter /user/topUP
2023-04-28 12:34:35 INFO  [http-nio-8080-exec-4]: - find user by login = null
2023-04-28 12:34:35 INFO  [http-nio-8080-exec-7]: - Entered /login
2023-04-28 12:34:36 INFO  [http-nio-8080-exec-8]: - Entered /user/profile
2023-04-28 12:34:36 INFO  [http-nio-8080-exec-8]: - find user by login = null
2023-04-28 12:35:34 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-04-28 12:35:34 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 12:35:37 INFO  [http-nio-8080-exec-3]: - Enter /user/topUP
2023-04-28 12:35:37 INFO  [http-nio-8080-exec-3]: - find user by login = null
2023-04-28 12:35:37 INFO  [http-nio-8080-exec-4]: - Entered /login
2023-04-28 12:38:13 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-28 12:38:17 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-28 12:41:36 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-28 12:42:17 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-28 12:42:19 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-28 12:43:46 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-04-28 12:44:38 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-04-28 12:44:41 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-04-28 12:44:42 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-04-28 12:44:55 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-04-28 12:44:58 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-04-28 12:51:40 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-04-28 12:51:44 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-04-28 12:52:09 INFO  [http-nio-8080-exec-4]: - Entered /new_film
2023-04-28 12:53:27 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-04-30 17:36:18 INFO  [http-nio-8080-exec-4]: - Redirect from / to the /catalog path
2023-04-30 17:36:18 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-30 17:36:23 INFO  [http-nio-8080-exec-6]: - Entered /login
2023-04-30 17:36:34 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-04-30 17:36:34 INFO  [http-nio-8080-exec-8]: - Entered /login
2023-04-30 17:37:06 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-04-30 17:37:15 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-04-30 17:37:15 INFO  [http-nio-8080-exec-6]: - Entered /login
2023-04-30 17:39:52 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-04-30 17:39:52 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-04-30 17:39:56 INFO  [http-nio-8080-exec-4]: - Entered /login
2023-04-30 17:40:03 INFO  [http-nio-8080-exec-5]: - Entered /login
2023-04-30 17:40:14 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-04-30 17:40:14 INFO  [http-nio-8080-exec-6]: - Entered /login
2023-04-30 17:41:05 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-04-30 17:41:10 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-04-30 17:41:12 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-04-30 17:41:16 INFO  [http-nio-8080-exec-4]: - Entered /login
2023-05-02 12:44:38 ERROR [main]: - Access denied for user 'root'@'172.17.0.1' (using password: YES)
2023-05-02 12:44:38 ERROR [http-nio-8080-exec-1]: - Access denied for user 'root'@'172.17.0.1' (using password: YES)
2023-05-02 12:44:38 ERROR [http-nio-8080-exec-1]: - Access denied for user 'root'@'172.17.0.1' (using password: YES)
2023-05-02 12:46:51 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-02 12:46:51 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-02 12:47:27 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-02 12:47:30 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-02 12:47:49 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-02 17:46:21 ERROR [main]: - Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2023-05-02 17:46:21 ERROR [http-nio-8080-exec-1]: - Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2023-05-02 17:46:21 ERROR [http-nio-8080-exec-1]: - Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2023-05-02 17:54:54 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-02 17:54:55 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-05-02 18:42:12 INFO  [main]: - Entered /registration
2023-05-02 18:44:01 INFO  [main]: - Entered /registration
2023-05-02 18:45:18 INFO  [main]: - Entered /registration
2023-05-02 18:50:21 INFO  [main]: - Entered /registration
2023-05-02 18:51:14 INFO  [main]: - Entered /registration
2023-05-02 18:52:32 INFO  [main]: - Entered /registration
2023-05-05 21:24:26 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-05-05 21:24:26 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-05 21:24:42 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-05 21:24:43 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-05 21:25:30 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-05 21:25:46 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-05-05 21:27:15 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-05 21:27:21 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-05 21:28:43 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-05 21:28:54 INFO  [http-nio-8080-exec-9]: - entered /newActor
2023-05-05 21:30:28 INFO  [http-nio-8080-exec-7]: - get all actors
2023-05-05 21:31:39 INFO  [http-nio-8080-exec-1]: - get all actor by id
2023-05-05 21:31:51 INFO  [http-nio-8080-exec-2]: - get all actor by id
2023-05-05 21:31:56 INFO  [http-nio-8080-exec-3]: - get all actor by id
2023-05-05 21:33:44 INFO  [http-nio-8080-exec-5]: - Entered /user/purchases
2023-05-05 21:33:44 INFO  [http-nio-8080-exec-5]: - find user by login = null
2023-05-05 21:33:44 INFO  [http-nio-8080-exec-4]: - Entered /login
2023-05-05 21:33:48 INFO  [http-nio-8080-exec-9]: - Entered /user/profile
2023-05-05 21:33:48 INFO  [http-nio-8080-exec-9]: - find user by login = null
2023-05-05 21:33:48 INFO  [http-nio-8080-exec-10]: - Entered /login
2023-05-05 21:33:50 INFO  [http-nio-8080-exec-7]: - Entered /new_film
2023-05-05 21:33:51 INFO  [http-nio-8080-exec-8]: - Entered /user/profile
2023-05-05 21:33:51 INFO  [http-nio-8080-exec-8]: - find user by login = null
2023-05-05 21:33:51 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-05-05 21:34:10 INFO  [http-nio-8080-exec-2]: - Entered /user/purchases
2023-05-05 21:34:10 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-05-05 21:34:10 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-05-05 21:34:11 INFO  [http-nio-8080-exec-6]: - Entered /new_film
2023-05-05 21:34:13 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-05 21:35:00 INFO  [http-nio-8080-exec-8]: - actor id = 2 was added successfully
2023-05-05 21:35:25 INFO  [http-nio-8080-exec-6]: - deleted successfully
2023-05-05 21:35:34 INFO  [http-nio-8080-exec-9]: - actor id = 2 was added successfully
2023-05-05 21:35:54 INFO  [http-nio-8080-exec-8]: - Entered /new_film
2023-05-05 22:01:15 INFO  [main]: - Entered /registration
2023-05-05 22:01:49 INFO  [main]: - Entered /registration
2023-05-05 22:04:04 INFO  [main]: - Entered /registration
2023-05-05 22:06:54 INFO  [main]: - Entered /registration
2023-05-05 22:09:14 INFO  [main]: - Entered /registration
2023-05-05 22:11:37 INFO  [http-nio-8080-exec-2]: - Entered /registration
2023-05-05 22:11:52 INFO  [http-nio-8080-exec-3]: - find user by login = dsf
2023-05-05 22:12:00 INFO  [http-nio-8080-exec-6]: - Entered /registration
2023-05-05 22:12:03 INFO  [http-nio-8080-exec-5]: - Entered /registration
2023-05-05 22:12:06 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-05 22:17:03 INFO  [main]: - Entered /registration
2023-05-06 09:05:49 INFO  [http-nio-8080-exec-6]: - Redirect from / to the /catalog path
2023-05-06 09:05:49 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-06 09:10:13 INFO  [main]: - Entered /registration
2023-05-06 09:10:13 INFO  [main]: - addedorg.example.ukrflix.models.User@7cb38a6a
2023-05-06 09:10:13 INFO  [main]: - update user id:2
2023-05-06 09:10:13 INFO  [main]: - find user by login = user
2023-05-06 09:11:08 INFO  [main]: - addedorg.example.ukrflix.models.User@62515a47
2023-05-06 09:11:08 INFO  [main]: - update user id:2
2023-05-06 09:11:08 INFO  [main]: - find user by login = user
2023-05-06 09:13:48 INFO  [main]: - user was added successfully
2023-05-06 09:13:48 INFO  [main]: - redirect /login
2023-05-06 09:16:08 INFO  [main]: - user was added successfully
2023-05-06 09:16:08 INFO  [main]: - redirect /login
2023-05-06 09:16:44 INFO  [main]: - Entered /registration
2023-05-06 09:18:55 INFO  [main]: - Entered /registration
2023-05-06 09:20:01 INFO  [main]: - Entered /registration
2023-05-06 09:23:26 INFO  [main]: - Entered /registration
2023-05-06 09:24:53 INFO  [main]: - Entered /registration
2023-05-06 09:29:03 INFO  [main]: - Entered /registration
2023-05-06 09:29:34 INFO  [main]: - Entered /registration
2023-05-06 09:30:07 INFO  [main]: - Entered /registration
2023-05-06 09:30:50 INFO  [main]: - Entered /registration
2023-05-06 09:38:19 INFO  [main]: - Entered /registration
2023-05-06 09:56:47 INFO  [main]: - Entered /registration
2023-05-06 09:57:26 INFO  [main]: - Entered /registration
2023-05-06 09:58:41 INFO  [main]: - Entered /registration
2023-05-06 09:59:00 INFO  [main]: - Entered /registration
2023-05-06 11:30:21 INFO  [http-nio-8080-exec-10]: - Redirect from / to the /catalog path
2023-05-06 11:30:21 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-06 11:42:50 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-06 11:43:28 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-06 11:55:02 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-06 12:06:46 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-06 12:10:14 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-06 13:19:03 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-06 13:19:03 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-06 13:51:09 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-06 13:51:09 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-06 14:25:46 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-06 15:24:54 INFO  [http-nio-8080-exec-4]: - Redirect from / to the /catalog path
2023-05-06 15:24:54 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-06 15:46:10 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-06 15:46:50 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-06 15:51:18 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-05-06 15:51:18 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-06 22:10:27 INFO  [http-nio-8080-exec-4]: - Redirect from / to the /catalog path
2023-05-06 22:10:27 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-07 15:42:54 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-05-07 15:42:54 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-07 15:42:58 INFO  [http-nio-8080-exec-4]: - Entered /new_film
2023-05-08 11:48:30 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 11:51:44 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:00:32 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 12:02:27 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:02:31 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-05-08 12:02:38 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-05-08 12:02:38 INFO  [http-nio-8080-exec-6]: - user was logged successfully
2023-05-08 12:02:38 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-08 12:02:41 INFO  [http-nio-8080-exec-8]: - Entered /user/purchases
2023-05-08 12:02:41 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-05-08 12:02:41 INFO  [http-nio-8080-exec-3]: - Enter /user/topUP
2023-05-08 12:02:41 INFO  [http-nio-8080-exec-3]: - find user by login = user
2023-05-08 12:02:44 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-05-08 12:02:44 INFO  [http-nio-8080-exec-4]: - account was replenished successfully, account+=22
2023-05-08 12:02:44 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 12:02:46 INFO  [http-nio-8080-exec-9]: - Enter /user/topUP
2023-05-08 12:02:46 INFO  [http-nio-8080-exec-9]: - find user by login = user
2023-05-08 12:27:07 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:27:11 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 12:27:13 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 12:27:15 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-08 12:27:16 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 12:27:21 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-08 12:28:15 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:32:47 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:36:19 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 12:36:19 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:36:32 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 12:36:32 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-08 12:36:41 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-08 12:36:47 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-08 12:36:47 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 12:36:52 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-05-08 12:36:52 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-05-08 12:38:32 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:38:47 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 12:38:49 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 12:42:56 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 12:46:21 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:48:06 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:48:06 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 17:49:08 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:49:12 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 17:49:13 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 17:49:15 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 17:49:16 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-08 17:49:17 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-08 17:52:07 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:56:10 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 17:56:16 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:56:16 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-08 17:56:23 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 17:56:25 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 17:56:30 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-08 17:56:41 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-05-08 17:56:43 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-05-08 17:56:45 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-05-08 17:56:46 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-08 17:57:37 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:57:44 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-05-08 17:57:50 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 17:59:17 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 17:59:22 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 17:59:24 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 17:59:26 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-08 17:59:31 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-08 17:59:33 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-08 17:59:35 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-08 17:59:36 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-05-08 17:59:38 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-05-08 17:59:39 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-05-08 18:00:20 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 18:00:25 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 18:00:28 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-08 22:41:15 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 22:41:29 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-08 22:57:43 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-08 22:58:02 INFO  [http-nio-8080-exec-4]: - actor id = 2 was added successfully
2023-05-08 22:58:27 INFO  [http-nio-8080-exec-7]: - deleted successfully
2023-05-08 22:58:31 INFO  [http-nio-8080-exec-10]: - actor id = 2 was added successfully
2023-05-08 23:27:51 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-09 08:22:18 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-09 08:22:18 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-05-09 08:22:18 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-09 08:22:34 INFO  [http-nio-8080-exec-7]: - actor id = 2 was added successfully
2023-05-09 08:37:15 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-05-09 08:37:22 INFO  [http-nio-8080-exec-5]: - deleted successfully
2023-05-09 08:37:34 INFO  [http-nio-8080-exec-9]: - actor id = 4 was added successfully
2023-05-09 08:37:38 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 08:39:39 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 08:46:35 INFO  [http-nio-8080-exec-1]: - deleted successfully
2023-05-09 08:47:33 INFO  [http-nio-8080-exec-4]: - deleted successfully
2023-05-09 08:51:17 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 08:51:33 INFO  [http-nio-8080-exec-4]: - deleted successfully
2023-05-09 08:51:36 INFO  [http-nio-8080-exec-6]: - deleted successfully
2023-05-09 08:54:16 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 09:29:48 INFO  [http-nio-8080-exec-5]: - deleted successfully
2023-05-09 09:41:35 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 09:41:35 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 09:41:35 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 09:41:35 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 09:41:36 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 09:41:36 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 09:41:37 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 09:41:37 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 09:41:37 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 09:41:37 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 09:41:37 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 09:41:37 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 09:41:37 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 09:41:37 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 09:41:38 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 09:41:38 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 09:41:38 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 09:41:38 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 09:41:38 DEBUG [main]: - JDBC version : 4.2
2023-05-09 09:41:38 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 09:41:39 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 09:41:39 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 09:41:39 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 09:41:39 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 09:41:39 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:41:39 DEBUG [main]: - Import with entity name Actor
2023-05-09 09:41:39 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 09:41:39 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Building property id
2023-05-09 09:41:39 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 09:41:39 DEBUG [main]: - Building property birthday
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:39 DEBUG [main]: - Building property films
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 09:41:39 DEBUG [main]: - Building property firstname
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 09:41:39 DEBUG [main]: - Building property lastname
2023-05-09 09:41:39 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:41:39 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 09:41:39 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 09:41:39 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Building property id
2023-05-09 09:41:39 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Building property actor
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Building property film
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for role
2023-05-09 09:41:39 DEBUG [main]: - Building property role
2023-05-09 09:41:39 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:41:39 DEBUG [main]: - Import with entity name Film
2023-05-09 09:41:39 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 09:41:39 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Building property id
2023-05-09 09:41:39 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:41:39 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:39 DEBUG [main]: - Building property actorAssociations
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for description
2023-05-09 09:41:39 DEBUG [main]: - Building property description
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 09:41:39 DEBUG [main]: - Building property img_src
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for name
2023-05-09 09:41:39 DEBUG [main]: - Building property name
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for price
2023-05-09 09:41:39 DEBUG [main]: - Building property price
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:41:39 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:41:39 DEBUG [main]: - Building property purchases
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 09:41:39 DEBUG [main]: - Building property release_date
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 09:41:39 DEBUG [main]: - Building property yt_src
2023-05-09 09:41:39 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:41:39 DEBUG [main]: - Import with entity name Purchase
2023-05-09 09:41:39 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 09:41:39 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Building property id
2023-05-09 09:41:39 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Building property film
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Building property user
2023-05-09 09:41:39 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:41:39 DEBUG [main]: - Import with entity name User
2023-05-09 09:41:39 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 09:41:39 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Building property id
2023-05-09 09:41:39 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for account
2023-05-09 09:41:39 DEBUG [main]: - Building property account
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 09:41:39 DEBUG [main]: - Building property birthday
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for email
2023-05-09 09:41:39 DEBUG [main]: - Building property email
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:41:39 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 09:41:39 DEBUG [main]: - Building property films
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 09:41:39 DEBUG [main]: - Building property firstname
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 09:41:39 DEBUG [main]: - Building property lastname
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for login
2023-05-09 09:41:39 DEBUG [main]: - Building property login
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for password
2023-05-09 09:41:39 DEBUG [main]: - Building property password
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 09:41:39 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 09:41:39 DEBUG [main]: - building SimpleValue for phone
2023-05-09 09:41:39 DEBUG [main]: - Building property phone
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 09:41:39 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 09:41:39 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 09:41:39 DEBUG [main]: - Building property purchases
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 09:41:39 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 09:41:39 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 09:41:39 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 09:41:39 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 09:41:39 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 09:41:39 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 09:41:39 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 09:41:39 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 09:41:40 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 09:41:40 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:40 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:40 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 09:41:40 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:40 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 09:41:40 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 09:41:40 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 09:41:40 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 09:41:40 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 09:41:40 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 09:41:40 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 09:41:40 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 09:41:40 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 09:41:40 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 09:41:40 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 09:41:40 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 09:41:40 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 09:41:40 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:41:40 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 09:41:40 DEBUG [main]: - Building session factory
2023-05-09 09:41:40 DEBUG [main]: - SessionFactory name : null
2023-05-09 09:41:40 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 09:41:40 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 09:41:40 DEBUG [main]: - Statistics: disabled
2023-05-09 09:41:40 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 09:41:40 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 09:41:40 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 09:41:40 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 09:41:40 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 09:41:40 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 09:41:40 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 09:41:40 DEBUG [main]: - Default null ordering: NONE
2023-05-09 09:41:40 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 09:41:40 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 09:41:40 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 09:41:40 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 09:41:40 DEBUG [main]: - Query language substitutions: {}
2023-05-09 09:41:40 DEBUG [main]: - Named query checking : enabled
2023-05-09 09:41:40 DEBUG [main]: - Second-level cache: disabled
2023-05-09 09:41:40 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 09:41:40 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 09:41:40 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 09:41:40 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 09:41:40 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 09:41:40 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 09:41:40 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 09:41:40 DEBUG [main]: - JDBC batch size: 15
2023-05-09 09:41:40 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 09:41:40 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 09:41:40 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 09:41:40 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 09:41:40 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 09:41:40 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 09:41:40 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 09:41:40 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 09:41:40 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 09:41:40 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 09:41:40 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 09:41:40 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:41:40 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:41:40 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 09:41:40 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 09:41:40 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 09:41:40 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 09:41:40 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 09:41:40 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 09:41:40 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 09:41:40 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 09:41:40 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 09:41:41 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 09:41:41 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 09:41:41 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 09:41:41 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 09:41:41 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 09:41:41 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 09:41:41 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:41:41 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 09:41:41 DEBUG [main]: - Instantiated session factory
2023-05-09 09:41:41 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 09:41:41 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:41 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:41 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:41 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:41 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 09:41:41 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 09:41:42 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 09:41:42 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:41:42 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 09:41:42 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 09:41:42 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 09:41:42 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:42 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 09:41:42 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 09:41:42 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 09:41:42 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 09:41:42 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 09:41:42 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 09:41:42 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 09:41:42 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:42 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 09:41:42 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 09:41:42 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 09:41:42 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 09:41:42 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 09:41:42 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 09:41:42 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 09:41:42 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : role
2023-05-09 09:41:42 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:42 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:42 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 09:41:42 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 09:41:42 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 09:41:42 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 09:41:42 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 09:41:42 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : description
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : name
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : price
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 09:41:42 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:42 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:42 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 09:41:42 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 09:41:42 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 09:41:42 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 09:41:42 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 09:41:42 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 09:41:42 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 09:41:42 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user
2023-05-09 09:41:42 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 09:41:42 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 09:41:42 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 09:41:42 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:42 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:42 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 09:41:43 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 09:41:43 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 09:41:43 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 09:41:43 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 09:41:43 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 09:41:43 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 09:41:43 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : account
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : email
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : login
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : password
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 09:41:43 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 09:41:43 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 09:41:43 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 09:41:43 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 09:41:43 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 09:41:43 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 09:41:43 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : description
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : name
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : price
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : description
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : name
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : price
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : role
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user
2023-05-09 09:41:43 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 09:41:43 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 09:41:43 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 09:41:43 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:41:43 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:41:43 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 09:41:43 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 09:41:43 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 09:41:43 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 09:41:43 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 09:41:43 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 09:41:43 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 09:41:43 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 09:41:43 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:41:43 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 09:41:43 DEBUG [main]: - Registering SessionFactory: a66885e5-67c1-4c06-9a53-95076e469513 (<unnamed>)
2023-05-09 09:41:43 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 09:41:44 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 09:41:45 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 09:41:45 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 09:41:45 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 09:41:45 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 09:41:45 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 09:41:45 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:41:45 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 09:41:45 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 09:41:45 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 09:41:45 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 09:41:45 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 09:41:45 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 09:41:45 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:41:45 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 09:41:45 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 09:41:45 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 09:41:45 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 09:41:45 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 09:41:45 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:41:45 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 09:41:45 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 09:41:45 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 09:41:45 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 09:41:45 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 09:41:45 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 09:41:45 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 09:41:45 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 09:41:45 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 09:41:45 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 09:41:45 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 09:41:45 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 09:41:45 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 09:41:45 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 09:41:45 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 09:41:45 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 09:41:45 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:41:45 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:41:45 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:41:45 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:41:47 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 09:41:47 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 09:41:47 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 09:41:47 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 09:41:47 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 09:41:47 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 09:41:47 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 09:41:47 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 09:41:47 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 09:41:47 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 09:41:47 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 09:41:47 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 09:41:47 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 09:41:47 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 09:41:48 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - parse() - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'example'
    |  |  |  |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |  |  |  |  \-[IDENT] Node: 'model'
    |  |  |  |  \-[IDENT] Node: 'ActorAssociation'
    |  |  |  \-[ALIAS] Node: 'generatedAlias0'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'generatedAlias0'
    |  |  |  |  \-[IDENT] Node: 'film'
    |  |  |  \-[ALIAS] Node: 'generatedAlias1'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'generatedAlias0'
    |  |     |  \-[IDENT] Node: 'actor'
    |  |     \-[ALIAS] Node: 'generatedAlias2'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'generatedAlias1'
          |  |  \-[IDENT] Node: 'id'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'param0'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'generatedAlias2'
             |  \-[IDENT] Node: 'id'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'param1'

2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select << begin [level=1, statement=select]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.ActorAssociation (generatedAlias0) -> actorassoc0_
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for film in org.example.ukrflix.model.ActorAssociation (generatedAlias1) parent = [ {null} ]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Film (generatedAlias1) -> film1_
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.film -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=null,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.film -> actorassoc0_.film_id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Film film1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}

2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for actor in org.example.ukrflix.model.ActorAssociation (generatedAlias2) parent = [ {null} ]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Actor (generatedAlias2) -> actor2_
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.actor -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=null,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.actor -> actorassoc0_.actor_id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Actor actor2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}

2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1 -> film1_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1.id -> film1_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2 -> actor2_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2.id -> actor2_.id
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select : finishing up [level=1, statement=select]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - processQuery() :  ( SELECT ( {select clause} actorassoc0_.id ) ( FromClause{level=1} ( ActorAssociation actorassoc0_ ( Film film1_ Actor actor2_ ) ) ) ( where ( and ( = ( film1_.id film1_.id id ) ? ) ( = ( actor2_.id actor2_.id id ) ? ) ) ) )
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity ActorAssociation): [ActorAssociation]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    |     \-FromElement
    |        \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  | path: generatedAlias1.id
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  |  | originalText: generatedAlias1
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: id
          |  \-ParameterNode
          \-BinaryLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: generatedAlias2.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: generatedAlias2
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-ParameterNode

2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [ActorAssociation actorassoc0_]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Film film1_ on actorassoc0_.film_id=film1_.id]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select >> end [level=1, statement=select]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Film,Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actorassoc0_.id as id1_1_' {alias=generatedAlias0, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[generatedAlias0, generatedAlias2, generatedAlias1], fromElementByTableAlias=[actor2_, actorassoc0_, film1_], fromElementsByPath=[generatedAlias0.film, generatedAlias0.actor], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=ActorAssociation,tableAlias=actorassoc0_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Film film1_ on actorassoc0_.film_id=film1_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
    |        \-[JOIN_FRAGMENT] FromElement: 'left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'film1_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias1.id,tableAlias=film1_,className=org.example.ukrflix.model.Film,classAlias=generatedAlias1}
          |  |  +-[ALIAS_REF] IdentNode: 'film1_.id' {alias=generatedAlias1, className=org.example.ukrflix.model.Film, tableAlias=film1_}
          |  |  \-[IDENT] IdentNode: 'id' {originalText=id}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.IntegerType@276961df}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'actor2_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias2.id,tableAlias=actor2_,className=org.example.ukrflix.model.Actor,classAlias=generatedAlias2}
             |  +-[ALIAS_REF] IdentNode: 'actor2_.id' {alias=generatedAlias2, className=org.example.ukrflix.model.Actor, tableAlias=actor2_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[NAMED_PARAM] ParameterNode: '?' {name=param1, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - SQL: select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 09:42:01 DEBUG [http-nio-8080-exec-2]: - Configured EntityCopyObserver strategy: disallow
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Static select for action ACTION_MERGE on entity org.example.ukrflix.model.ActorAssociation: select actorassoc0_.id as id1_1_3_, actorassoc0_.actor_id as actor_id3_1_3_, actorassoc0_.film_id as film_id4_1_3_, actorassoc0_.role as role2_1_3_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_, purchases3_.film_id as film_id2_3_5_, purchases3_.id as id1_3_5_, purchases3_.id as id1_3_2_, purchases3_.film_id as film_id2_3_2_, purchases3_.user_id as user_id3_3_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id left outer join Purchase purchases3_ on film2_.id=purchases3_.film_id where actorassoc0_.id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_3_, actorassoc0_.actor_id as actor_id3_1_3_, actorassoc0_.film_id as film_id4_1_3_, actorassoc0_.role as role2_1_3_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_, purchases3_.film_id as film_id2_3_5_, purchases3_.id as id1_3_5_, purchases3_.id as id1_3_2_, purchases3_.film_id as film_id2_3_2_, purchases3_.user_id as user_id3_3_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id left outer join Purchase purchases3_ on film2_.id=purchases3_.film_id where actorassoc0_.id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1], EntityKey[org.example.ukrflix.model.Film#1], null, EntityKey[org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Result set contains (possibly empty) collection: [org.example.ukrflix.model.Film.purchases#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.purchases#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Done entity load
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=2, role='null'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}, Film{id=2, name='Fast & Furious', release_date=2001-10-18, price=22, actorAssociations=[ActorAssociation{id=2, role='null'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Processing flush-time cascades
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Dirty checking collections
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#1], was: [org.example.ukrflix.model.Actor.films#1] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#1], was: [org.example.ukrflix.model.Film.actorAssociations#1] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#1], was: [org.example.ukrflix.model.Film.purchases#1] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#2], was: [org.example.ukrflix.model.Actor.films#2] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#4], was: [org.example.ukrflix.model.Actor.films#4] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#3], was: [org.example.ukrflix.model.Film.actorAssociations#3] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#3], was: [org.example.ukrflix.model.Film.purchases#3] (uninitialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#2], was: [org.example.ukrflix.model.Film.actorAssociations#2] (initialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#2], was: [org.example.ukrflix.model.Film.purchases#2] (uninitialized)
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 insertions, 0 updates, 0 deletions to 12 objects
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 9 collections
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - Listing entities:
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1969-02-11, films=[org.example.ukrflix.model.Film#1], firstname=Jennifer, id=4, lastname=Aniston}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=<uninitialized>, release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#4, role=dfsa, id=8, film=org.example.ukrflix.model.Film#1}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=fasfd, id=7, film=org.example.ukrflix.model.Film#1}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=<uninitialized>, release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#1, org.example.ukrflix.model.ActorAssociation#7, org.example.ukrflix.model.ActorAssociation#8], purchases=[], release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=1, film=org.example.ukrflix.model.Film#1}
2023-05-09 09:42:02 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = fasfd
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 09:42:02 DEBUG [http-nio-8080-exec-3]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 09:43:03 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 09:57:52 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 09:57:53 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 09:57:53 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 09:57:53 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 09:57:53 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 09:57:53 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 09:57:54 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 09:57:54 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 09:57:54 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 09:57:54 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 09:57:54 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 09:57:54 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 09:57:54 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 09:57:54 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 09:57:55 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 09:57:55 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 09:57:55 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 09:57:55 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 09:57:55 DEBUG [main]: - JDBC version : 4.2
2023-05-09 09:57:55 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 09:57:56 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 09:57:56 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 09:57:56 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 09:57:56 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 09:57:56 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:57:56 DEBUG [main]: - Import with entity name Actor
2023-05-09 09:57:56 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 09:57:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 09:57:56 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:57:56 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 09:57:56 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:57:56 DEBUG [main]: - Building property id
2023-05-09 09:57:56 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 09:57:56 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 09:57:56 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 09:57:56 DEBUG [main]: - Building property birthday
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:56 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 09:57:56 DEBUG [main]: - Building property films
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 09:57:56 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 09:57:56 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 09:57:56 DEBUG [main]: - Building property firstname
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 09:57:56 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 09:57:56 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 09:57:56 DEBUG [main]: - Building property lastname
2023-05-09 09:57:56 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:57:56 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 09:57:56 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 09:57:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 09:57:56 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:57:56 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 09:57:56 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:57:56 DEBUG [main]: - Building property id
2023-05-09 09:57:56 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:56 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Building property actor
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Building property film
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for role
2023-05-09 09:57:57 DEBUG [main]: - Building property role
2023-05-09 09:57:57 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:57:57 DEBUG [main]: - Import with entity name Film
2023-05-09 09:57:57 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 09:57:57 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Building property id
2023-05-09 09:57:57 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:57:57 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:57:57 DEBUG [main]: - Building property actorAssociations
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for description
2023-05-09 09:57:57 DEBUG [main]: - Building property description
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 09:57:57 DEBUG [main]: - Building property img_src
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for name
2023-05-09 09:57:57 DEBUG [main]: - Building property name
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for price
2023-05-09 09:57:57 DEBUG [main]: - Building property price
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 09:57:57 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:57:57 DEBUG [main]: - Building property purchases
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 09:57:57 DEBUG [main]: - Building property release_date
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 09:57:57 DEBUG [main]: - Building property yt_src
2023-05-09 09:57:57 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:57:57 DEBUG [main]: - Import with entity name Purchase
2023-05-09 09:57:57 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 09:57:57 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Building property id
2023-05-09 09:57:57 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Building property film
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Building property user
2023-05-09 09:57:57 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 09:57:57 DEBUG [main]: - Import with entity name User
2023-05-09 09:57:57 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 09:57:57 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Building property id
2023-05-09 09:57:57 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for account
2023-05-09 09:57:57 DEBUG [main]: - Building property account
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 09:57:57 DEBUG [main]: - Building property birthday
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for email
2023-05-09 09:57:57 DEBUG [main]: - Building property email
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 09:57:57 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 09:57:57 DEBUG [main]: - Building property films
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 09:57:57 DEBUG [main]: - Building property firstname
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 09:57:57 DEBUG [main]: - Building property lastname
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for login
2023-05-09 09:57:57 DEBUG [main]: - Building property login
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for password
2023-05-09 09:57:57 DEBUG [main]: - Building property password
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 09:57:57 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 09:57:57 DEBUG [main]: - building SimpleValue for phone
2023-05-09 09:57:57 DEBUG [main]: - Building property phone
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 09:57:57 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 09:57:57 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 09:57:57 DEBUG [main]: - Building property purchases
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 09:57:57 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 09:57:57 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 09:57:57 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 09:57:57 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 09:57:57 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 09:57:57 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 09:57:57 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 09:57:57 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 09:57:57 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 09:57:57 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 09:57:57 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 09:57:57 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 09:57:57 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:57:57 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 09:57:57 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 09:57:57 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 09:57:57 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 09:57:57 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 09:57:57 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 09:57:57 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 09:57:57 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 09:57:57 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 09:57:57 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 09:57:57 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 09:57:57 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 09:57:57 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 09:57:57 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 09:57:57 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 09:57:57 DEBUG [main]: - Building session factory
2023-05-09 09:57:57 DEBUG [main]: - SessionFactory name : null
2023-05-09 09:57:57 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 09:57:57 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 09:57:57 DEBUG [main]: - Statistics: disabled
2023-05-09 09:57:57 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 09:57:57 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 09:57:57 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 09:57:57 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 09:57:57 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 09:57:57 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 09:57:57 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 09:57:57 DEBUG [main]: - Default null ordering: NONE
2023-05-09 09:57:57 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 09:57:57 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 09:57:57 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 09:57:57 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 09:57:57 DEBUG [main]: - Query language substitutions: {}
2023-05-09 09:57:57 DEBUG [main]: - Named query checking : enabled
2023-05-09 09:57:57 DEBUG [main]: - Second-level cache: disabled
2023-05-09 09:57:57 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 09:57:57 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 09:57:57 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 09:57:57 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 09:57:57 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 09:57:57 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 09:57:57 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 09:57:57 DEBUG [main]: - JDBC batch size: 15
2023-05-09 09:57:57 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 09:57:57 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 09:57:57 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 09:57:57 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 09:57:57 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 09:57:57 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 09:57:57 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 09:57:57 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 09:57:57 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 09:57:57 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 09:57:57 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 09:57:57 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:57:57 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:57:57 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 09:57:57 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 09:57:57 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 09:57:57 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 09:57:57 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 09:57:57 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 09:57:57 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 09:57:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 09:57:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 09:57:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 09:57:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 09:57:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 09:57:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 09:57:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 09:57:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 09:57:58 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:57:58 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 09:57:58 DEBUG [main]: - Instantiated session factory
2023-05-09 09:57:58 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 09:57:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 09:57:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 09:57:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 09:57:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 09:57:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 09:57:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 09:57:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 09:57:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 09:57:59 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 09:57:59 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 09:57:59 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 09:57:59 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 09:57:59 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 09:57:59 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 09:57:59 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 09:57:59 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 09:57:59 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 09:57:59 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 09:57:59 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 09:57:59 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:57:59 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 09:57:59 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 09:57:59 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 09:57:59 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 09:57:59 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 09:57:59 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 09:57:59 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 09:57:59 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 09:57:59 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 09:57:59 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 09:57:59 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : role
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 09:58:00 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 09:58:00 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 09:58:00 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 09:58:00 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 09:58:00 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 09:58:00 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 09:58:00 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 09:58:00 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 09:58:00 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 09:58:00 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 09:58:00 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 09:58:00 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : account
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : email
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : login
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : password
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 09:58:00 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 09:58:00 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 09:58:00 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 09:58:00 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 09:58:00 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : role
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : film
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user
2023-05-09 09:58:00 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 09:58:00 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 09:58:00 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 09:58:00 DEBUG [main]: - Building LoadPlan...
2023-05-09 09:58:00 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 09:58:00 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 09:58:00 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 09:58:00 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 09:58:00 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 09:58:00 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 09:58:00 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 09:58:00 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 09:58:00 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 09:58:00 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 09:58:00 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 09:58:00 DEBUG [main]: - Registering SessionFactory: f9e404c6-b3d1-4673-82ae-50ebd13d6707 (<unnamed>)
2023-05-09 09:58:00 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 09:58:01 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 09:58:02 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 09:58:02 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 09:58:02 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 09:58:02 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 09:58:02 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 09:58:02 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:58:02 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 09:58:02 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 09:58:02 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 09:58:02 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 09:58:02 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 09:58:02 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 09:58:02 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:58:02 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 09:58:02 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 09:58:02 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 09:58:02 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 09:58:02 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 09:58:02 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:58:02 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 09:58:02 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 09:58:02 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 09:58:02 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 09:58:02 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 09:58:02 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 09:58:02 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 09:58:02 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 09:58:02 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 09:58:02 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 09:58:02 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 09:58:02 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 09:58:02 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 09:58:02 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 09:58:02 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 09:58:02 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 09:58:02 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:58:03 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:58:03 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:58:03 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:58:04 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 09:58:04 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 09:58:04 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 09:58:04 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 09:58:04 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 09:58:04 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 09:58:04 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 09:58:05 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 09:58:05 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 09:58:05 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 09:58:05 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 09:58:05 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 09:58:05 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 09:58:05 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - parse() - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - throwQueryException() : no errors
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'example'
    |  |  |  |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |  |  |  |  \-[IDENT] Node: 'model'
    |  |  |  |  \-[IDENT] Node: 'ActorAssociation'
    |  |  |  \-[ALIAS] Node: 'generatedAlias0'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'generatedAlias0'
    |  |  |  |  \-[IDENT] Node: 'film'
    |  |  |  \-[ALIAS] Node: 'generatedAlias1'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'generatedAlias0'
    |  |     |  \-[IDENT] Node: 'actor'
    |  |     \-[ALIAS] Node: 'generatedAlias2'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'generatedAlias1'
          |  |  \-[IDENT] Node: 'id'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'param0'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'generatedAlias2'
             |  \-[IDENT] Node: 'id'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'param1'

2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select << begin [level=1, statement=select]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - FromClause{level=1} : org.example.ukrflix.model.ActorAssociation (generatedAlias0) -> actorassoc0_
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - dereferenceEntityJoin() : generating join for film in org.example.ukrflix.model.ActorAssociation (generatedAlias1) parent = [ {null} ]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - FromClause{level=1} : org.example.ukrflix.model.Film (generatedAlias1) -> film1_
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - addJoinByPathMap() : generatedAlias0.film -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=null,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias0.film -> actorassoc0_.film_id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Film film1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}

2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - dereferenceEntityJoin() : generating join for actor in org.example.ukrflix.model.ActorAssociation (generatedAlias2) parent = [ {null} ]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - FromClause{level=1} : org.example.ukrflix.model.Actor (generatedAlias2) -> actor2_
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - addJoinByPathMap() : generatedAlias0.actor -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=null,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias0.actor -> actorassoc0_.actor_id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Actor actor2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}

2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias1 -> film1_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias1.id -> film1_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias2 -> actor2_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolved : generatedAlias2.id -> actor2_.id
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select : finishing up [level=1, statement=select]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - processQuery() :  ( SELECT ( {select clause} actorassoc0_.id ) ( FromClause{level=1} ( ActorAssociation actorassoc0_ ( Film film1_ Actor actor2_ ) ) ) ( where ( and ( = ( film1_.id film1_.id id ) ? ) ( = ( actor2_.id actor2_.id id ) ? ) ) ) )
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity ActorAssociation): [ActorAssociation]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    |     \-FromElement
    |        \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  | path: generatedAlias1.id
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  |  | originalText: generatedAlias1
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: id
          |  \-ParameterNode
          \-BinaryLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: generatedAlias2.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: generatedAlias2
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-ParameterNode

2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Using FROM fragment [ActorAssociation actorassoc0_]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Using FROM fragment [left outer join Film film1_ on actorassoc0_.film_id=film1_.id]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Using FROM fragment [left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select >> end [level=1, statement=select]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Film,Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actorassoc0_.id as id1_1_' {alias=generatedAlias0, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[generatedAlias0, generatedAlias2, generatedAlias1], fromElementByTableAlias=[actor2_, actorassoc0_, film1_], fromElementsByPath=[generatedAlias0.film, generatedAlias0.actor], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=ActorAssociation,tableAlias=actorassoc0_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Film film1_ on actorassoc0_.film_id=film1_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
    |        \-[JOIN_FRAGMENT] FromElement: 'left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'film1_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias1.id,tableAlias=film1_,className=org.example.ukrflix.model.Film,classAlias=generatedAlias1}
          |  |  +-[ALIAS_REF] IdentNode: 'film1_.id' {alias=generatedAlias1, className=org.example.ukrflix.model.Film, tableAlias=film1_}
          |  |  \-[IDENT] IdentNode: 'id' {originalText=id}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.IntegerType@276961df}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'actor2_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias2.id,tableAlias=actor2_,className=org.example.ukrflix.model.Actor,classAlias=generatedAlias2}
             |  +-[ALIAS_REF] IdentNode: 'actor2_.id' {alias=generatedAlias2, className=org.example.ukrflix.model.Actor, tableAlias=actor2_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[NAMED_PARAM] ParameterNode: '?' {name=param1, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - throwQueryException() : no errors
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - SQL: select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - throwQueryException() : no errors
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Result set row: 0
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Configured EntityCopyObserver strategy: disallow
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Static select for action ACTION_MERGE on entity org.example.ukrflix.model.ActorAssociation: select actorassoc0_.id as id1_1_3_, actorassoc0_.actor_id as actor_id3_1_3_, actorassoc0_.film_id as film_id4_1_3_, actorassoc0_.role as role2_1_3_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_, purchases3_.film_id as film_id2_3_5_, purchases3_.id as id1_3_5_, purchases3_.id as id1_3_2_, purchases3_.film_id as film_id2_3_2_, purchases3_.user_id as user_id3_3_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id left outer join Purchase purchases3_ on film2_.id=purchases3_.film_id where actorassoc0_.id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.id as id1_1_3_, actorassoc0_.actor_id as actor_id3_1_3_, actorassoc0_.film_id as film_id4_1_3_, actorassoc0_.role as role2_1_3_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_, purchases3_.film_id as film_id2_3_5_, purchases3_.id as id1_3_5_, purchases3_.id as id1_3_2_, purchases3_.film_id as film_id2_3_2_, purchases3_.user_id as user_id3_3_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id left outer join Purchase purchases3_ on film2_.id=purchases3_.film_id where actorassoc0_.id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Result set row: 0
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1], EntityKey[org.example.ukrflix.model.Film#1], null, EntityKey[org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Result set contains (possibly empty) collection: [org.example.ukrflix.model.Film.purchases#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.purchases#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done entity load
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Reset storedSnapshot to [ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Reset storedSnapshot to [ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Reset storedSnapshot to [ActorAssociation{id=2, role='null'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}, Film{id=2, name='Fast & Furious', release_date=2001-10-18, price=22, actorAssociations=[ActorAssociation{id=2, role='null'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.purchases#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.purchases#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.purchases#3]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.purchases#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.purchases#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.purchases#2]
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.purchases
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Processing flush-time cascades
2023-05-09 09:58:10 DEBUG [http-nio-8080-exec-1]: - Dirty checking collections
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Film.purchases#1]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Film.purchases#3]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Collection dereferenced: [org.example.ukrflix.model.Film.purchases#2]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Flushed: 0 insertions, 0 updates, 12 deletions to 12 objects
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Flushed: 0 (re)creations, 0 updates, 9 removals to 9 collections
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Listing entities:
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.Actor{birthday=1969-02-11, films=[org.example.ukrflix.model.Film#1], firstname=Jennifer, id=4, lastname=Aniston}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=[], release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#4, role=dfsa, id=8, film=org.example.ukrflix.model.Film#1}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=fasfd, id=7, film=org.example.ukrflix.model.Film#1}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=[], release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#1, org.example.ukrflix.model.ActorAssociation#7, org.example.ukrflix.model.ActorAssociation#8], purchases=[], release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=1, film=org.example.ukrflix.model.Film#1}
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Deleting collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - delete from ActorAssociation where actor_id=?
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Done deleting collection
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Deleting collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - delete from ActorAssociation where actor_id=?
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Done deleting collection
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Deleting collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - delete from ActorAssociation where actor_id=?
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - Done deleting collection
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - delete from ActorAssociation where id=?
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.handlePersistenceException(ExceptionConverterImpl.java:297)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:94)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1395)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:482)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3274)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2409)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:448)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:746)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:714)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:533)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:304)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.delete(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.deleteActorFromFilm(ActorAssociationService.java:48)
	at org.example.ukrflix.controller.FilmController.deleteActorFromFilm(FilmController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:192)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:746)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:714)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:533)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:304)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.delete(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.deleteActorFromFilm(ActorAssociationService.java:48)
	at org.example.ukrflix.controller.FilmController.deleteActorFromFilm(FilmController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 09:58:11 INFO  [http-nio-8080-exec-1]: - HHH000010: On release of batch it still contained JDBC statements
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - rollback() called on an inactive transaction
2023-05-09 09:58:11 DEBUG [http-nio-8080-exec-1]: - HHH000420: Closing un-released batch
2023-05-09 10:00:58 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:00:58 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:00:58 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:00:58 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:00:58 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:00:58 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:00:59 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:00:59 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:00:59 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 10:01:00 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 10:01:00 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 10:01:00 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 10:01:00 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 10:01:00 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 10:01:00 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:01:00 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:01:00 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:01:01 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:01:01 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:01:01 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:01:01 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:01:01 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:01:01 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:01:01 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:01:01 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 10:01:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:01:02 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:01:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:01:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Building property id
2023-05-09 10:01:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:01:02 DEBUG [main]: - Building property birthday
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:02 DEBUG [main]: - Building property films
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:01:02 DEBUG [main]: - Building property firstname
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:01:02 DEBUG [main]: - Building property lastname
2023-05-09 10:01:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:01:02 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:01:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:01:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Building property id
2023-05-09 10:01:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Building property actor
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Building property film
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:01:02 DEBUG [main]: - Building property role
2023-05-09 10:01:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:01:02 DEBUG [main]: - Import with entity name Film
2023-05-09 10:01:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:01:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Building property id
2023-05-09 10:01:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:01:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:02 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:01:02 DEBUG [main]: - Building property description
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:01:02 DEBUG [main]: - Building property img_src
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:01:02 DEBUG [main]: - Building property name
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:01:02 DEBUG [main]: - Building property price
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:01:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:01:02 DEBUG [main]: - Building property purchases
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:01:02 DEBUG [main]: - Building property release_date
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:01:02 DEBUG [main]: - Building property yt_src
2023-05-09 10:01:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:01:02 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:01:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:01:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Building property id
2023-05-09 10:01:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Building property film
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Building property user
2023-05-09 10:01:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:01:02 DEBUG [main]: - Import with entity name User
2023-05-09 10:01:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:01:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Building property id
2023-05-09 10:01:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:01:02 DEBUG [main]: - Building property account
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:01:02 DEBUG [main]: - Building property birthday
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:01:02 DEBUG [main]: - Building property email
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:01:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:01:02 DEBUG [main]: - Building property films
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:01:02 DEBUG [main]: - Building property firstname
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:01:02 DEBUG [main]: - Building property lastname
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:01:02 DEBUG [main]: - Building property login
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:01:02 DEBUG [main]: - Building property password
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:01:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:01:02 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:01:02 DEBUG [main]: - Building property phone
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:01:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:01:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:01:02 DEBUG [main]: - Building property purchases
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:01:02 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:01:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:01:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:01:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:01:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:01:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:01:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:01:02 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:01:02 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:01:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:02 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:02 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:01:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:02 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:01:02 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:01:02 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:01:02 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:01:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:01:02 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:01:02 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:01:02 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:01:02 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:01:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:01:02 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:01:02 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:01:02 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:01:02 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:01:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:01:02 DEBUG [main]: - Building session factory
2023-05-09 10:01:02 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:01:02 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:01:02 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:01:02 DEBUG [main]: - Statistics: disabled
2023-05-09 10:01:02 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:01:02 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:01:02 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:01:02 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:01:02 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:01:02 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:01:02 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:01:02 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:01:02 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:01:02 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:01:02 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:01:02 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:01:02 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:01:02 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:01:02 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:01:02 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:01:02 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:01:02 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:01:02 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:01:02 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:01:02 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:01:02 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:01:02 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:01:02 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:01:02 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:01:02 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:01:02 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:01:02 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:01:02 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:01:02 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:01:02 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:01:02 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:01:02 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:01:02 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:01:03 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:01:03 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:01:03 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:01:03 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:01:03 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:01:03 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:01:03 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:01:03 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:01:03 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:01:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:01:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:01:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:01:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:01:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:01:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:01:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:01:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 10:01:04 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:01:04 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:01:04 DEBUG [main]: - Instantiated session factory
2023-05-09 10:01:04 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 10:01:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:01:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:01:05 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:01:05 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:01:05 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:01:05 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:01:05 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:01:05 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:05 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:01:05 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:01:05 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:01:05 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:01:05 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:01:05 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:01:05 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:01:05 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:01:05 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:01:05 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:01:05 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:01:05 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:01:05 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:01:05 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:01:05 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:01:05 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:01:05 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:01:05 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:01:05 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:01:05 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:01:05 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:01:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:01:05 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:01:05 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:01:05 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:01:05 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:01:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:01:05 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:01:05 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:01:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:01:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:01:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:01:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:01:06 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:01:06 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:01:06 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:01:06 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:01:06 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:01:06 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:01:06 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:01:06 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 10:01:06 DEBUG [main]: - Registering SessionFactory: e1e7764a-b096-42e0-8022-0d18c9f0a61b (<unnamed>)
2023-05-09 10:01:06 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:01:07 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:01:07 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 10:01:07 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:01:07 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:01:07 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:01:08 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:01:08 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:08 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:01:08 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:01:08 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:01:08 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:01:08 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:01:08 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:01:08 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:08 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:01:08 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:01:08 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:01:08 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:01:08 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:01:08 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:08 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:01:08 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:01:08 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:01:08 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:01:08 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:01:08 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:01:08 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:01:08 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:01:08 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:01:08 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:01:08 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:01:08 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:01:08 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:01:08 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:01:08 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:01:08 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:01:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:10 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:01:10 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:01:10 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:01:10 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:01:10 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:01:10 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:01:10 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:01:10 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:01:10 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:01:10 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:01:10 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:01:10 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:01:10 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:01:10 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:01:11 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - parse() - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'example'
    |  |  |  |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |  |  |  |  \-[IDENT] Node: 'model'
    |  |  |  |  \-[IDENT] Node: 'ActorAssociation'
    |  |  |  \-[ALIAS] Node: 'generatedAlias0'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'generatedAlias0'
    |  |  |  |  \-[IDENT] Node: 'film'
    |  |  |  \-[ALIAS] Node: 'generatedAlias1'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'generatedAlias0'
    |  |     |  \-[IDENT] Node: 'actor'
    |  |     \-[ALIAS] Node: 'generatedAlias2'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'generatedAlias1'
          |  |  \-[IDENT] Node: 'id'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'param0'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'generatedAlias2'
             |  \-[IDENT] Node: 'id'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'param1'

2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select << begin [level=1, statement=select]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.ActorAssociation (generatedAlias0) -> actorassoc0_
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for film in org.example.ukrflix.model.ActorAssociation (generatedAlias1) parent = [ {null} ]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Film (generatedAlias1) -> film1_
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.film -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=null,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.film -> actorassoc0_.film_id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Film film1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}

2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for actor in org.example.ukrflix.model.ActorAssociation (generatedAlias2) parent = [ {null} ]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Actor (generatedAlias2) -> actor2_
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.actor -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=null,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.actor -> actorassoc0_.actor_id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Actor actor2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}

2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1 -> film1_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1.id -> film1_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2 -> actor2_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2.id -> actor2_.id
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select : finishing up [level=1, statement=select]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - processQuery() :  ( SELECT ( {select clause} actorassoc0_.id ) ( FromClause{level=1} ( ActorAssociation actorassoc0_ ( Film film1_ Actor actor2_ ) ) ) ( where ( and ( = ( film1_.id film1_.id id ) ? ) ( = ( actor2_.id actor2_.id id ) ? ) ) ) )
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity ActorAssociation): [ActorAssociation]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    |     \-FromElement
    |        \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  | path: generatedAlias1.id
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  |  | originalText: generatedAlias1
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: id
          |  \-ParameterNode
          \-BinaryLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: generatedAlias2.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: generatedAlias2
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-ParameterNode

2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [ActorAssociation actorassoc0_]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Film film1_ on actorassoc0_.film_id=film1_.id]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select >> end [level=1, statement=select]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Film,Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actorassoc0_.id as id1_1_' {alias=generatedAlias0, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[generatedAlias0, generatedAlias2, generatedAlias1], fromElementByTableAlias=[actor2_, actorassoc0_, film1_], fromElementsByPath=[generatedAlias0.film, generatedAlias0.actor], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=ActorAssociation,tableAlias=actorassoc0_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Film film1_ on actorassoc0_.film_id=film1_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
    |        \-[JOIN_FRAGMENT] FromElement: 'left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'film1_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias1.id,tableAlias=film1_,className=org.example.ukrflix.model.Film,classAlias=generatedAlias1}
          |  |  +-[ALIAS_REF] IdentNode: 'film1_.id' {alias=generatedAlias1, className=org.example.ukrflix.model.Film, tableAlias=film1_}
          |  |  \-[IDENT] IdentNode: 'id' {originalText=id}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.IntegerType@276961df}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'actor2_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias2.id,tableAlias=actor2_,className=org.example.ukrflix.model.Actor,classAlias=generatedAlias2}
             |  +-[ALIAS_REF] IdentNode: 'actor2_.id' {alias=generatedAlias2, className=org.example.ukrflix.model.Actor, tableAlias=actor2_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[NAMED_PARAM] ParameterNode: '?' {name=param1, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - SQL: select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:14 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Configured EntityCopyObserver strategy: disallow
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Static select for action ACTION_MERGE on entity org.example.ukrflix.model.ActorAssociation: select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1], EntityKey[org.example.ukrflix.model.Film#1], EntityKey[org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Done entity load
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}]}, Film{id=2, name='Fast & Furious', release_date=2001-10-18, price=22, actorAssociations=[ActorAssociation{id=2, role='null'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=1, role='null'}, ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Processing flush-time cascades
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Dirty checking collections
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#1], was: [org.example.ukrflix.model.Actor.films#1] (initialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#1], was: [org.example.ukrflix.model.Film.actorAssociations#1] (initialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#1], was: [org.example.ukrflix.model.Film.purchases#1] (uninitialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#2], was: [org.example.ukrflix.model.Actor.films#2] (initialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#4], was: [org.example.ukrflix.model.Actor.films#4] (initialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#3], was: [org.example.ukrflix.model.Film.actorAssociations#3] (initialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#3], was: [org.example.ukrflix.model.Film.purchases#3] (uninitialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#2], was: [org.example.ukrflix.model.Film.actorAssociations#2] (initialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#2], was: [org.example.ukrflix.model.Film.purchases#2] (uninitialized)
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 insertions, 0 updates, 1 deletions to 12 objects
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 9 collections
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - Listing entities:
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1969-02-11, films=[org.example.ukrflix.model.Film#1], firstname=Jennifer, id=4, lastname=Aniston}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=<uninitialized>, release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#4, role=dfsa, id=8, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=fasfd, id=7, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=<uninitialized>, release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#1, org.example.ukrflix.model.ActorAssociation#7, org.example.ukrflix.model.ActorAssociation#8], purchases=<uninitialized>, release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=1, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - delete from ActorAssociation where id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-2]: - HHH000420: Closing un-released batch
2023-05-09 10:01:15 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = fasfd
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:01:15 DEBUG [http-nio-8080-exec-3]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:11:40 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:11:41 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:11:41 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:11:41 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:11:41 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:11:41 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:11:42 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:11:42 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:11:42 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 10:11:42 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 10:11:42 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 10:11:42 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 10:11:42 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 10:11:42 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 10:11:43 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:11:43 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:11:43 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:11:44 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:11:44 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:11:44 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:11:44 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:11:44 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:11:44 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:11:44 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:11:44 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 10:11:44 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:11:44 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:11:44 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:11:44 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:11:45 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Building property id
2023-05-09 10:11:45 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:11:45 DEBUG [main]: - Building property birthday
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:45 DEBUG [main]: - Building property films
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:11:45 DEBUG [main]: - Building property firstname
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:11:45 DEBUG [main]: - Building property lastname
2023-05-09 10:11:45 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:11:45 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:11:45 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:11:45 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Building property id
2023-05-09 10:11:45 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Building property actor
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Building property film
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:11:45 DEBUG [main]: - Building property role
2023-05-09 10:11:45 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:11:45 DEBUG [main]: - Import with entity name Film
2023-05-09 10:11:45 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:11:45 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Building property id
2023-05-09 10:11:45 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:11:45 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:45 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:11:45 DEBUG [main]: - Building property description
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:11:45 DEBUG [main]: - Building property img_src
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:11:45 DEBUG [main]: - Building property name
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:11:45 DEBUG [main]: - Building property price
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:11:45 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:11:45 DEBUG [main]: - Building property purchases
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:11:45 DEBUG [main]: - Building property release_date
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:11:45 DEBUG [main]: - Building property yt_src
2023-05-09 10:11:45 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:11:45 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:11:45 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:11:45 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Building property id
2023-05-09 10:11:45 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Building property film
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Building property user
2023-05-09 10:11:45 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:11:45 DEBUG [main]: - Import with entity name User
2023-05-09 10:11:45 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:11:45 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Building property id
2023-05-09 10:11:45 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:11:45 DEBUG [main]: - Building property account
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:11:45 DEBUG [main]: - Building property birthday
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:11:45 DEBUG [main]: - Building property email
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:11:45 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:11:45 DEBUG [main]: - Building property films
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:11:45 DEBUG [main]: - Building property firstname
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:11:45 DEBUG [main]: - Building property lastname
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:11:45 DEBUG [main]: - Building property login
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:11:45 DEBUG [main]: - Building property password
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:11:45 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:11:45 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:11:45 DEBUG [main]: - Building property phone
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:11:45 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:11:45 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:11:45 DEBUG [main]: - Building property purchases
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:11:45 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:11:45 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:11:45 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:11:45 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:11:45 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:11:45 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:11:45 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:11:45 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:11:45 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:11:45 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:45 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:45 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:11:45 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:45 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:11:45 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:11:45 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:11:45 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:11:45 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:11:45 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:11:45 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:11:45 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:11:45 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:11:45 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:11:45 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:11:45 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:11:45 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:11:45 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:11:45 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:11:45 DEBUG [main]: - Building session factory
2023-05-09 10:11:45 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:11:45 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:11:45 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:11:45 DEBUG [main]: - Statistics: disabled
2023-05-09 10:11:45 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:11:45 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:11:45 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:11:45 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:11:45 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:11:45 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:11:45 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:11:45 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:11:45 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:11:45 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:11:45 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:11:45 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:11:45 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:11:45 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:11:45 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:11:45 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:11:45 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:11:45 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:11:45 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:11:45 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:11:45 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:11:45 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:11:45 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:11:45 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:11:45 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:11:45 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:11:45 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:11:45 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:11:45 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:11:45 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:11:45 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:11:45 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:11:45 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:11:45 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:11:45 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:11:45 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:11:45 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:11:45 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:11:46 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:11:46 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:11:46 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:11:46 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:11:46 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:11:46 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:11:46 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:11:46 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:11:46 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:11:46 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:11:46 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:11:46 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:11:46 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 10:11:46 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:11:46 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:11:46 DEBUG [main]: - Instantiated session factory
2023-05-09 10:11:46 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 10:11:46 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:46 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:46 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:46 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:46 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:11:46 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:11:47 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:11:47 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:11:47 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:11:47 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:11:47 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:11:47 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:11:47 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:47 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:11:47 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:11:47 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:11:47 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:11:47 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:11:47 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:11:47 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:11:47 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:11:47 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:11:47 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:11:47 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:47 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:11:47 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:11:47 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:11:47 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:11:47 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:11:47 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:11:47 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:11:47 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:11:47 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:11:47 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:11:47 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:11:48 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:11:48 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:11:48 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:11:48 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:11:48 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:11:48 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:11:48 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:11:48 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:11:48 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:11:48 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:11:48 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:11:48 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:11:48 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:11:48 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:11:48 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:11:48 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:11:48 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:11:48 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:11:48 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:11:48 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:11:48 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:11:48 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:11:48 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:11:48 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:11:48 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:11:48 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:11:48 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:11:48 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:11:48 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:11:48 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:11:48 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:11:49 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 10:11:49 DEBUG [main]: - Registering SessionFactory: df2837fb-11c5-416a-a76d-7f35ab307b08 (<unnamed>)
2023-05-09 10:11:49 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:11:49 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:11:50 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 10:11:50 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:11:50 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:11:50 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:11:50 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:11:50 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:11:50 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:11:50 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:11:50 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:11:50 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:11:50 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:11:50 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:11:50 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:11:50 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:11:50 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:11:50 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:11:50 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:11:50 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:11:50 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:11:50 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:11:50 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:11:50 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:11:50 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:11:50 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:11:50 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:11:50 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:11:50 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:11:50 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:11:50 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:11:50 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:11:50 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:11:50 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:11:50 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:11:50 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:11:50 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:11:50 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:51 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:51 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:51 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:52 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:11:52 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:11:52 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:11:52 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:11:52 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:11:52 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:11:52 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:11:53 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:11:53 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:11:53 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:11:53 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:11:53 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:11:53 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:11:53 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Result set row: 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:53 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:54 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = fasfd
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = fasfd
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.handlePersistenceException(ExceptionConverterImpl.java:297)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:779)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:741)
	at org.hibernate.engine.spi.CascadingActions$7.cascade(CascadingActions.java:298)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:510)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:434)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:427)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:264)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:749)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:191)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:755)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:11:58 DEBUG [http-nio-8080-exec-3]: - rolling back
2023-05-09 10:12:45 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:12:45 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:12:45 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:12:45 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:12:46 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:12:46 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:12:47 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:12:47 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:12:47 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 10:12:47 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 10:12:47 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 10:12:47 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 10:12:47 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 10:12:47 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 10:12:48 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:12:48 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:12:48 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:12:49 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:12:49 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:12:49 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:12:49 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:12:49 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:12:49 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:12:49 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:12:49 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 10:12:49 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:12:49 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:12:49 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:12:49 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:12:49 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:49 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:12:49 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:12:49 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:12:49 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:12:49 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:12:49 DEBUG [main]: - Building property id
2023-05-09 10:12:49 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:12:49 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:49 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:12:49 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:12:49 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:12:49 DEBUG [main]: - Building property birthday
2023-05-09 10:12:49 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:12:50 DEBUG [main]: - Building property films
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:12:50 DEBUG [main]: - Building property firstname
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:12:50 DEBUG [main]: - Building property lastname
2023-05-09 10:12:50 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:12:50 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:12:50 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:12:50 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Building property id
2023-05-09 10:12:50 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Building property actor
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Building property film
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:12:50 DEBUG [main]: - Building property role
2023-05-09 10:12:50 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:12:50 DEBUG [main]: - Import with entity name Film
2023-05-09 10:12:50 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:12:50 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Building property id
2023-05-09 10:12:50 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:12:50 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:12:50 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:12:50 DEBUG [main]: - Building property description
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:12:50 DEBUG [main]: - Building property img_src
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:12:50 DEBUG [main]: - Building property name
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:12:50 DEBUG [main]: - Building property price
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:12:50 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:12:50 DEBUG [main]: - Building property purchases
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:12:50 DEBUG [main]: - Building property release_date
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:12:50 DEBUG [main]: - Building property yt_src
2023-05-09 10:12:50 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:12:50 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:12:50 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:12:50 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Building property id
2023-05-09 10:12:50 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Building property film
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Building property user
2023-05-09 10:12:50 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:12:50 DEBUG [main]: - Import with entity name User
2023-05-09 10:12:50 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:12:50 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Building property id
2023-05-09 10:12:50 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:12:50 DEBUG [main]: - Building property account
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:12:50 DEBUG [main]: - Building property birthday
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:12:50 DEBUG [main]: - Building property email
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:12:50 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:12:50 DEBUG [main]: - Building property films
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:12:50 DEBUG [main]: - Building property firstname
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:12:50 DEBUG [main]: - Building property lastname
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:12:50 DEBUG [main]: - Building property login
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:12:50 DEBUG [main]: - Building property password
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:12:50 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:12:50 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:12:50 DEBUG [main]: - Building property phone
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:12:50 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:12:50 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:12:50 DEBUG [main]: - Building property purchases
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:12:50 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:12:50 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:12:50 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:12:50 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:12:50 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:12:50 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:12:50 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:12:50 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:12:50 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:12:50 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:12:50 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:12:50 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:12:50 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:12:50 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:12:50 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:12:50 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:12:50 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:12:50 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:12:50 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:12:50 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:12:50 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:12:50 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:12:50 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:12:50 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:12:50 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:12:50 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:12:50 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:12:50 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:12:50 DEBUG [main]: - Building session factory
2023-05-09 10:12:50 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:12:50 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:12:50 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:12:50 DEBUG [main]: - Statistics: disabled
2023-05-09 10:12:50 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:12:50 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:12:50 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:12:50 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:12:50 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:12:50 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:12:50 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:12:50 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:12:50 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:12:50 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:12:50 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:12:50 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:12:50 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:12:50 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:12:50 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:12:50 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:12:50 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:12:50 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:12:50 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:12:50 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:12:50 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:12:50 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:12:50 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:12:50 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:12:50 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:12:50 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:12:50 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:12:50 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:12:50 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:12:50 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:12:50 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:12:50 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:12:50 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:12:50 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:12:50 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:12:50 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:12:50 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:12:50 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:12:50 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:12:51 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:12:51 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:12:51 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:12:51 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:12:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:12:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:12:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:12:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:12:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:12:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:12:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:12:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 10:12:51 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:12:51 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:12:51 DEBUG [main]: - Instantiated session factory
2023-05-09 10:12:51 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 10:12:51 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:51 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:51 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:51 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:12:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:12:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:12:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:12:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:12:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:12:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:12:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:12:52 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:12:52 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:12:52 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:12:52 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:12:52 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:12:52 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:12:52 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:12:52 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:12:52 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:12:52 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:12:52 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:12:52 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:12:52 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:12:52 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:12:52 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:12:52 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:12:52 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:12:52 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:12:52 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:12:52 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:12:52 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:12:52 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:12:52 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:12:52 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 10:12:52 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:12:53 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:12:53 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:12:53 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:12:53 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:12:53 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:12:53 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:12:53 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:12:53 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:12:53 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:12:53 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:12:53 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:12:53 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:12:53 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:12:53 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:12:53 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:12:53 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:12:53 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:12:53 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:12:53 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:12:53 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:12:53 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:12:53 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:12:53 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:12:53 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:12:53 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:12:53 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:12:53 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:12:53 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:12:53 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:12:53 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:12:53 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:12:53 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 10:12:53 DEBUG [main]: - Registering SessionFactory: c49cf110-bed2-4aca-916a-aed9924d97b3 (<unnamed>)
2023-05-09 10:12:53 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:12:54 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:12:55 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 10:12:55 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:12:55 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:12:55 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:12:55 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:12:55 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:12:55 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:12:55 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:12:55 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:12:55 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:12:55 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:12:55 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:12:55 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:12:55 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:12:55 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:12:55 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:12:55 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:12:55 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:12:55 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:12:55 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:12:55 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:12:55 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:12:55 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:12:55 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:12:55 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:12:55 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:12:55 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:12:55 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:12:55 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:12:55 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:12:55 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:12:55 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:12:55 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:12:55 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:12:55 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:12:55 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:12:55 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:12:55 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:12:55 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:12:57 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:12:57 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:12:57 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:12:57 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:12:57 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:12:57 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:12:57 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:12:57 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:12:57 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:12:57 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:12:57 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:12:57 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:12:57 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:12:57 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:12:59 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:12:59 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:12:59 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:12:59 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.handlePersistenceException(ExceptionConverterImpl.java:297)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:779)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:741)
	at org.hibernate.engine.spi.CascadingActions$7.cascade(CascadingActions.java:298)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:510)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:434)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:427)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:264)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:749)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:191)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:755)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:13:00 DEBUG [http-nio-8080-exec-1]: - rolling back
2023-05-09 10:13:55 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:13:55 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:13:55 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:13:55 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:13:56 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:13:56 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:13:56 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:13:56 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:13:57 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 10:13:57 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 10:13:57 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 10:13:57 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 10:13:57 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 10:13:57 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 10:13:57 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:13:57 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:13:57 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:13:58 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:13:58 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:13:58 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:13:58 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:13:58 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:13:58 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:13:59 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:13:59 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 10:13:59 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:13:59 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:13:59 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:13:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Building property id
2023-05-09 10:13:59 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:13:59 DEBUG [main]: - Building property birthday
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:59 DEBUG [main]: - Building property films
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:13:59 DEBUG [main]: - Building property firstname
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:13:59 DEBUG [main]: - Building property lastname
2023-05-09 10:13:59 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:13:59 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:13:59 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:13:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Building property id
2023-05-09 10:13:59 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Building property actor
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Building property film
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:13:59 DEBUG [main]: - Building property role
2023-05-09 10:13:59 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:13:59 DEBUG [main]: - Import with entity name Film
2023-05-09 10:13:59 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:13:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Building property id
2023-05-09 10:13:59 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:13:59 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:13:59 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:13:59 DEBUG [main]: - Building property description
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:13:59 DEBUG [main]: - Building property img_src
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:13:59 DEBUG [main]: - Building property name
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:13:59 DEBUG [main]: - Building property price
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:13:59 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:13:59 DEBUG [main]: - Building property purchases
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:13:59 DEBUG [main]: - Building property release_date
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:13:59 DEBUG [main]: - Building property yt_src
2023-05-09 10:13:59 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:13:59 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:13:59 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:13:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Building property id
2023-05-09 10:13:59 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Building property film
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Building property user
2023-05-09 10:13:59 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:13:59 DEBUG [main]: - Import with entity name User
2023-05-09 10:13:59 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:13:59 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Building property id
2023-05-09 10:13:59 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:13:59 DEBUG [main]: - Building property account
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:13:59 DEBUG [main]: - Building property birthday
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:13:59 DEBUG [main]: - Building property email
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:13:59 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:13:59 DEBUG [main]: - Building property films
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:13:59 DEBUG [main]: - Building property firstname
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:13:59 DEBUG [main]: - Building property lastname
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:13:59 DEBUG [main]: - Building property login
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:13:59 DEBUG [main]: - Building property password
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:13:59 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:13:59 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:13:59 DEBUG [main]: - Building property phone
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:13:59 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:13:59 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:13:59 DEBUG [main]: - Building property purchases
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:13:59 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:13:59 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:13:59 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:13:59 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:13:59 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:13:59 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:13:59 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:13:59 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:13:59 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:13:59 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:59 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:13:59 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:13:59 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:00 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:14:00 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:14:00 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:14:00 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:00 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:14:00 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:14:00 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:14:00 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:14:00 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:14:00 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:14:00 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:14:00 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:14:00 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:14:00 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:00 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:14:00 DEBUG [main]: - Building session factory
2023-05-09 10:14:00 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:14:00 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:14:00 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:14:00 DEBUG [main]: - Statistics: disabled
2023-05-09 10:14:00 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:14:00 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:14:00 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:14:00 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:14:00 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:14:00 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:14:00 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:14:00 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:14:00 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:14:00 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:14:00 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:14:00 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:14:00 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:14:00 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:14:00 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:14:00 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:14:00 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:14:00 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:14:00 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:14:00 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:14:00 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:14:00 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:14:00 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:14:00 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:14:00 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:14:00 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:14:00 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:14:00 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:14:00 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:14:00 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:14:00 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:14:00 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:14:00 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:14:00 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:14:00 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:00 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:00 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:14:00 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:14:00 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:14:00 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:14:00 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:14:00 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:14:00 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:14:01 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:14:01 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:01 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:14:01 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:14:01 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:14:01 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:14:01 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:14:01 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 10:14:01 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:01 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:14:01 DEBUG [main]: - Instantiated session factory
2023-05-09 10:14:01 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 10:14:01 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:01 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:01 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:01 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:01 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:14:01 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:14:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:14:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:14:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:14:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:14:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:14:02 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:02 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:14:02 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:14:02 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:14:02 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:14:02 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:14:02 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:14:02 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:14:02 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:14:02 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:14:02 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:14:02 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:02 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:14:02 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:14:02 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:14:02 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:14:02 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:14:02 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:02 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:14:02 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:14:02 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:14:02 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:14:02 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:14:02 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:14:02 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:14:02 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:02 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:14:02 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:14:02 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 10:14:02 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:14:02 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:14:02 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:14:03 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:14:03 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:14:03 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:14:03 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:14:03 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:14:03 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:14:03 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:14:03 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:14:03 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:14:03 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:14:03 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:14:03 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:14:03 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:14:03 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:14:03 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:14:03 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:14:03 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:14:03 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:14:03 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:14:03 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:14:03 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:03 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:03 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:14:03 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:14:03 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:14:03 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:14:03 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:14:03 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:14:03 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:14:03 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:14:03 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:03 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 10:14:03 DEBUG [main]: - Registering SessionFactory: cbfc86d3-bf89-42e6-9bf9-e98dbf37125e (<unnamed>)
2023-05-09 10:14:03 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:14:04 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:14:05 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 10:14:05 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:14:05 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:14:05 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:14:05 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:14:05 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:14:05 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:14:05 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:14:05 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:14:05 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:14:05 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:14:05 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:14:05 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:14:05 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:14:05 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:14:05 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:14:05 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:14:05 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:14:05 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:14:05 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:14:05 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:14:05 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:14:05 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:14:05 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:14:05 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:14:05 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:14:05 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:14:05 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:14:05 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:14:05 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:14:05 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:14:05 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:14:05 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:14:05 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:14:05 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:14:05 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:05 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:05 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:05 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:07 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:14:07 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:14:07 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:14:07 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:14:07 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:14:07 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:14:07 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:14:07 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:14:07 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:14:07 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:14:07 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:14:07 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:14:07 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:14:07 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = fasfd
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = fasfd
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Result set row: 0
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Result set row: 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Result row: EntityKey[org.example.ukrflix.model.Actor#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.handlePersistenceException(ExceptionConverterImpl.java:297)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:779)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:741)
	at org.hibernate.engine.spi.CascadingActions$7.cascade(CascadingActions.java:298)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:510)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:434)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:427)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:264)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:749)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:191)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:755)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:14:08 DEBUG [http-nio-8080-exec-3]: - rolling back
2023-05-09 10:14:47 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@3581c5f3

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:14:47 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:14:47 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:14:47 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:14:47 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:14:47 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:14:48 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:14:48 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:14:48 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@dc6c5ca
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@dc6c5ca
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@dc6c5ca
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@4105b1d2
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@61f9cab2
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@5c3b3f04
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@1972346b
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@1972346b
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1972346b
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@13cdfd26
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@13cdfd26
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@13cdfd26
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@4015ebf1
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@4015ebf1
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@4015ebf1
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@1ff02deb
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@1ff02deb
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@1ff02deb
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@3e9afede
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@3e9afede
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@3e9afede
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@f5a1b27
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@f5a1b27
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@f5a1b27
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@18161415
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@18161415
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@29e94753
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@29e94753
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@367026f
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@367026f
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@12f1b76c
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@61f26cba
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@6d7a6abf
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@6d7a6abf
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@32be0ebd
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@32be0ebd
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@3b2b9b96
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@3b2b9b96
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@15e8918
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@15e8918
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@c822a3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@c822a3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@533053b4
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@533053b4
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@11763e57
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@11763e57
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@62f11904
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@62f11904
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@6852c3d2
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@6852c3d2
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@cbbc0ac
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@cbbc0ac
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@787073b3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@787073b3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@5e9650d3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@5e9650d3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@5e9650d3
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@c083cec
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@64a552
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@64a552
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@64a552
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@7f8589b1
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@7d5b1446
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@224bff6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@224bff6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@36f329e7
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@36f329e7
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6e2ab1f4
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6e2ab1f4
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@6aca85da
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@6aca85da
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@19bd1f98
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@19bd1f98
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@5f160f9c
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@66161fee
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@66161fee
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@66161fee
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@56b5de49
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@56b5de49
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@56b5de49
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@3341ba8e
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@3413effc
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@5c1348c6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@5c1348c6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@5c1348c6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@680f7a5e
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@680f7a5e
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@680f7a5e
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@31829b82
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@6e04275e
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@44264fb6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@44264fb6
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@249a7ccc
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@13e6b26c
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@13e6b26c
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@78b9d614
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@78b9d614
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@6f286e1d
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@2079ce51
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@766f2d65
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@5cbb2b1d
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5cbb2b1d
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1cc07127
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@23867b97
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@6b83b137
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4098a6b0
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@5f4ebecd
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@4f042c70
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@39f826ae
2023-05-09 10:14:49 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@3c50ba07
2023-05-09 10:14:49 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7] into BootstrapContext; was [null]
2023-05-09 10:14:49 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7) [was null]
2023-05-09 10:14:49 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@22796ead] into BootstrapContext; was [null]
2023-05-09 10:14:49 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@7107a4a3] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@a95807f]
2023-05-09 10:14:49 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7]
2023-05-09 10:14:49 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:14:49 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:14:50 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:14:50 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:14:50 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:14:50 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:14:50 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:14:50 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:14:50 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:14:50 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ff5aa42] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6ee9fcac]
2023-05-09 10:14:50 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:14:51 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:14:51 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:14:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Building property id
2023-05-09 10:14:51 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:14:51 DEBUG [main]: - Building property birthday
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:51 DEBUG [main]: - Building property films
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:14:51 DEBUG [main]: - Building property firstname
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:14:51 DEBUG [main]: - Building property lastname
2023-05-09 10:14:51 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:14:51 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:14:51 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:14:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Building property id
2023-05-09 10:14:51 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Building property actor
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Building property film
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:14:51 DEBUG [main]: - Building property role
2023-05-09 10:14:51 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:14:51 DEBUG [main]: - Import with entity name Film
2023-05-09 10:14:51 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:14:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Building property id
2023-05-09 10:14:51 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:14:51 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:51 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:14:51 DEBUG [main]: - Building property description
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:14:51 DEBUG [main]: - Building property img_src
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:14:51 DEBUG [main]: - Building property name
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:14:51 DEBUG [main]: - Building property price
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:14:51 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:14:51 DEBUG [main]: - Building property purchases
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:14:51 DEBUG [main]: - Building property release_date
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:14:51 DEBUG [main]: - Building property yt_src
2023-05-09 10:14:51 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:14:51 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:14:51 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:14:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Building property id
2023-05-09 10:14:51 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Building property film
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Building property user
2023-05-09 10:14:51 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:14:51 DEBUG [main]: - Import with entity name User
2023-05-09 10:14:51 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:14:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Building property id
2023-05-09 10:14:51 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:14:51 DEBUG [main]: - Building property account
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:14:51 DEBUG [main]: - Building property birthday
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:14:51 DEBUG [main]: - Building property email
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:14:51 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:14:51 DEBUG [main]: - Building property films
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:14:51 DEBUG [main]: - Building property firstname
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:14:51 DEBUG [main]: - Building property lastname
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:14:51 DEBUG [main]: - Building property login
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:14:51 DEBUG [main]: - Building property password
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:14:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:14:51 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:14:51 DEBUG [main]: - Building property phone
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:14:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:14:51 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:14:51 DEBUG [main]: - Building property purchases
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:14:51 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:14:51 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:14:51 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:14:51 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:14:51 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:14:51 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:14:51 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:14:51 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:14:51 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:14:51 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:51 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:51 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:14:51 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:51 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:14:51 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:14:51 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:14:51 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:51 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:14:51 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:14:51 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:14:51 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:14:51 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:14:51 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:14:51 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:14:51 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:14:51 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:14:51 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:14:51 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:14:51 DEBUG [main]: - Building session factory
2023-05-09 10:14:51 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:14:51 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:14:51 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:14:51 DEBUG [main]: - Statistics: disabled
2023-05-09 10:14:51 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:14:51 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:14:51 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:14:51 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:14:51 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:14:51 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:14:51 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:14:51 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:14:51 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:14:51 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:14:51 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:14:51 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:14:51 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:14:51 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:14:51 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:14:51 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:14:51 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:14:51 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:14:51 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:14:51 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:14:51 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:14:51 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:14:51 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:14:51 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:14:51 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:14:51 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:14:51 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:14:51 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:14:51 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:14:51 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:14:51 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:14:51 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:14:51 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:14:51 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:14:51 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:51 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:52 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:14:52 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@50d640dd, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:14:52 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:14:52 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:14:52 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:14:52 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:14:52 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:14:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:14:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:14:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7ef9ce2b, groups=[Ljava.lang.Class;@6cf782b6}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:14:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:14:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:14:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@74889ebe, groups=[Ljava.lang.Class;@7f52aba0}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6ae67bf6, groups=[Ljava.lang.Class;@47fa54d}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@3432a612, groups=[Ljava.lang.Class;@5e57149f}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5f385ee9, groups=[Ljava.lang.Class;@39ad5a7d}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:14:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@1a445b5, groups=[Ljava.lang.Class;@4785f176}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@281edf6b, groups=[Ljava.lang.Class;@77d50cde}, constraintType=GENERIC}.
2023-05-09 10:14:52 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:52 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:14:52 DEBUG [main]: - Instantiated session factory
2023-05-09 10:14:52 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ff5aa42] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@2ca08575]
2023-05-09 10:14:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:52 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:14:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:14:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:14:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:14:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:14:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:14:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:14:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:14:53 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:53 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:14:53 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:14:53 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:14:53 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:14:53 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:14:53 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:14:53 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:14:53 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:14:53 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:14:53 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:14:53 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:53 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:14:53 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:14:53 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:14:53 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:14:53 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:14:53 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:14:53 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:14:53 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:14:53 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:14:53 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:14:53 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20110864]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7d19d465]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6fb07db6]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2f6a923d]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5a238d7e]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:14:54 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:14:54 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:14:54 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:14:54 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@46050be4]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3dbe3bc4]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@69c071db]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6fb03f5]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7bf96c4e]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5dd7f921]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:14:54 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:14:54 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:14:54 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:14:54 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@12d644a6]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@34ceabf1]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5cb63d05]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@656ac24]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7babfd29]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@482f59f4]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:14:54 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:14:54 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:14:54 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:14:54 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c430548]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7a77ff45]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3bd05779]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6dbdfa38]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@546f0369]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d5a3ee]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:14:54 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:14:54 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:14:54 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:14:54 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:14:54 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6e32eea5]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@aa24615]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@29ab7ccc]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5f7a911f]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d45db20]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@13bd25ab]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d1f6213]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@faa592b]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@49e3bd37]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@687fa4d0]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@13666880]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5bfa2801]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7b787996]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4f8aa5fe]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@33a1bff8]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ba2a958]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@15fe48f5]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7ec65043]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6a584533]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1cfb035c]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e00efb]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5ef99f75]
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a9d873b]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:14:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f0271e]
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:14:54 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:14:54 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:14:54 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:14:54 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:14:54 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:14:54 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:14:54 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:14:54 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:14:54 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:14:54 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:14:54 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:14:54 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:14:54 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:14:54 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@c32b8b0
2023-05-09 10:14:54 DEBUG [main]: - Registering SessionFactory: a99a82fb-6b3b-4697-80ca-49b091dabd21 (<unnamed>)
2023-05-09 10:14:54 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:14:55 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:14:56 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@1b9bb6e6
2023-05-09 10:14:56 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:14:56 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:14:56 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:14:56 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:14:56 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@367026f
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@367026f
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:14:56 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:14:56 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:14:56 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:14:56 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:14:56 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:14:56 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:14:56 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:14:56 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:14:56 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:14:56 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:14:56 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:14:56 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:14:56 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:14:56 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:14:56 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:14:56 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:14:56 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:14:56 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:14:56 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:14:56 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:14:56 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:14:56 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:14:56 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:14:56 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:14:56 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@367026f}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@4bb13671}

2023-05-09 10:14:56 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:14:56 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:14:56 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:14:56 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:14:56 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:56 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:56 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:56 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:58 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:14:58 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:14:58 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:14:58 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:14:58 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:14:58 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:14:58 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:14:58 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:14:58 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:14:58 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:14:58 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:14:58 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:14:58 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:14:58 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.handlePersistenceException(ExceptionConverterImpl.java:297)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:779)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:741)
	at org.hibernate.engine.spi.CascadingActions$7.cascade(CascadingActions.java:298)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:510)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:434)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:427)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:264)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:749)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:324)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:414)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:191)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:755)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:735)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy3/jdk.proxy3.$Proxy73.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:489)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy3/jdk.proxy3.$Proxy85.save(Unknown Source)
	at org.example.ukrflix.service.ActorAssociationService.addActorToFilm(ActorAssociationService.java:41)
	at org.example.ukrflix.controller.FilmController.addActorToFilm(FilmController.java:105)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-05-09 10:14:59 DEBUG [http-nio-8080-exec-1]: - rolling back
2023-05-09 10:15:58 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:15:58 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:15:58 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:15:58 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:15:58 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:15:58 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:15:59 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:15:59 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:15:59 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 10:15:59 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 10:16:00 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 10:16:00 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 10:16:00 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 10:16:00 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 10:16:00 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 10:16:00 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:16:00 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:16:00 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:16:01 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:16:01 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:16:01 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:16:01 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:16:01 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:16:01 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:16:01 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:16:01 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 10:16:01 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:16:01 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:01 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:16:01 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:16:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Building property id
2023-05-09 10:16:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:16:02 DEBUG [main]: - Building property birthday
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:02 DEBUG [main]: - Building property films
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:16:02 DEBUG [main]: - Building property firstname
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:16:02 DEBUG [main]: - Building property lastname
2023-05-09 10:16:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:02 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:16:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:16:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Building property id
2023-05-09 10:16:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Building property actor
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Building property film
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:16:02 DEBUG [main]: - Building property role
2023-05-09 10:16:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:02 DEBUG [main]: - Import with entity name Film
2023-05-09 10:16:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:16:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Building property id
2023-05-09 10:16:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:02 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:16:02 DEBUG [main]: - Building property description
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:16:02 DEBUG [main]: - Building property img_src
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:16:02 DEBUG [main]: - Building property name
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:16:02 DEBUG [main]: - Building property price
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:16:02 DEBUG [main]: - Building property purchases
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:16:02 DEBUG [main]: - Building property release_date
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:16:02 DEBUG [main]: - Building property yt_src
2023-05-09 10:16:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:02 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:16:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:16:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Building property id
2023-05-09 10:16:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Building property film
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Building property user
2023-05-09 10:16:02 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:02 DEBUG [main]: - Import with entity name User
2023-05-09 10:16:02 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:16:02 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Building property id
2023-05-09 10:16:02 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:16:02 DEBUG [main]: - Building property account
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:16:02 DEBUG [main]: - Building property birthday
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:16:02 DEBUG [main]: - Building property email
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:16:02 DEBUG [main]: - Building property films
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:16:02 DEBUG [main]: - Building property firstname
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:16:02 DEBUG [main]: - Building property lastname
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:16:02 DEBUG [main]: - Building property login
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:16:02 DEBUG [main]: - Building property password
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:16:02 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:16:02 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:16:02 DEBUG [main]: - Building property phone
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:16:02 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:16:02 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:16:02 DEBUG [main]: - Building property purchases
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:16:02 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:16:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:16:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:16:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:16:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:16:02 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:16:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:16:02 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:16:02 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:16:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:02 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:02 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:16:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:02 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:16:02 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:16:02 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:16:02 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:16:02 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:16:02 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:16:02 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:16:02 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:16:02 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:16:02 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:16:02 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:16:02 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:16:02 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:02 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:16:02 DEBUG [main]: - Building session factory
2023-05-09 10:16:02 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:16:02 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:16:02 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:16:02 DEBUG [main]: - Statistics: disabled
2023-05-09 10:16:02 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:16:02 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:16:02 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:16:02 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:16:02 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:16:02 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:16:02 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:16:02 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:16:02 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:16:02 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:16:02 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:16:02 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:16:02 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:16:02 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:16:02 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:16:02 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:16:02 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:16:02 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:16:02 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:16:02 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:16:02 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:16:02 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:16:02 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:16:02 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:16:02 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:16:02 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:16:02 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:16:02 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:16:02 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:16:02 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:16:02 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:16:02 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:16:02 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:16:02 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:16:02 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:02 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:02 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:16:02 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:16:03 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:16:03 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:16:03 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:16:03 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:16:03 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:16:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:16:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:16:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:16:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:16:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:16:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:16:03 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 10:16:03 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:03 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:16:03 DEBUG [main]: - Instantiated session factory
2023-05-09 10:16:03 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 10:16:03 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:16:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:16:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:16:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:16:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:16:04 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:16:04 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:16:04 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:04 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:16:04 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:16:04 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:16:04 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:16:04 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:16:04 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:16:04 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:16:04 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:16:04 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:16:04 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:16:04 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:04 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:16:04 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:16:04 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:16:04 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:16:04 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:16:04 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:16:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:05 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:16:05 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:16:05 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:16:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:16:05 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:16:05 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:16:05 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:16:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:16:05 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:16:05 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:16:05 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:16:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:16:05 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:16:05 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:16:05 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:16:05 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:16:05 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:16:05 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:16:05 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:16:05 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:16:05 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:16:05 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:16:05 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:16:05 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:05 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:05 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:16:05 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:16:05 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:16:05 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:16:05 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:16:05 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:16:05 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:16:05 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:16:06 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:06 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 10:16:06 DEBUG [main]: - Registering SessionFactory: 76148ff3-ae48-41f7-9d97-f30b20372217 (<unnamed>)
2023-05-09 10:16:06 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:16:06 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:16:07 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 10:16:07 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:16:07 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:16:07 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:16:07 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:16:07 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:07 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:16:07 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:16:07 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:16:07 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:16:07 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:16:07 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:16:07 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:07 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:16:07 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:16:07 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:16:07 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:16:07 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:16:07 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:07 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:16:07 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:16:07 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:16:07 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:16:07 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:16:07 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:16:07 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:16:07 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:16:07 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:16:07 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:16:07 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:16:07 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:16:07 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:16:07 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:16:07 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:16:07 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:16:07 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:08 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:09 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:16:09 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:16:09 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:16:09 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:16:09 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:16:09 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:16:09 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:16:09 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:16:09 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:16:09 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:16:09 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:16:09 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:16:09 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:16:09 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Result set row: 0
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Result set row: 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Result row: EntityKey[org.example.ukrflix.model.Actor#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:10 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - begin
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 3
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = null
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 3
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = 
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = null
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - committing
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - begin
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 3
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = null
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 3
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = 
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `film` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing attribute `role` : value = null
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - committing
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - begin
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Executing identity-insert immediately
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Natively generated identity: 9
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - HHH000387: ResultSet's statement was not registered
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - committing
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Processing flush-time cascades
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Dirty checking collections
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - Listing entities:
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-7]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=, id=9, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:16:15 INFO  [http-nio-8080-exec-7]: - actor id = 1 was added successfully
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - begin
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = 
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 3
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = null
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 3
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = 
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 2
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = null
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - committing
2023-05-09 10:16:15 DEBUG [http-nio-8080-exec-4]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - parse() - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'example'
    |  |  |  |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |  |  |  |  \-[IDENT] Node: 'model'
    |  |  |  |  \-[IDENT] Node: 'ActorAssociation'
    |  |  |  \-[ALIAS] Node: 'generatedAlias0'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'generatedAlias0'
    |  |  |  |  \-[IDENT] Node: 'film'
    |  |  |  \-[ALIAS] Node: 'generatedAlias1'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'generatedAlias0'
    |  |     |  \-[IDENT] Node: 'actor'
    |  |     \-[ALIAS] Node: 'generatedAlias2'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'generatedAlias1'
          |  |  \-[IDENT] Node: 'id'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'param0'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'generatedAlias2'
             |  \-[IDENT] Node: 'id'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'param1'

2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select << begin [level=1, statement=select]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.ActorAssociation (generatedAlias0) -> actorassoc0_
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for film in org.example.ukrflix.model.ActorAssociation (generatedAlias1) parent = [ {null} ]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Film (generatedAlias1) -> film1_
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.film -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=null,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.film -> actorassoc0_.film_id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Film film1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}

2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for actor in org.example.ukrflix.model.ActorAssociation (generatedAlias2) parent = [ {null} ]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Actor (generatedAlias2) -> actor2_
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.actor -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=null,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.actor -> actorassoc0_.actor_id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Actor actor2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}

2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1 -> film1_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1.id -> film1_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2 -> actor2_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2.id -> actor2_.id
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select : finishing up [level=1, statement=select]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - processQuery() :  ( SELECT ( {select clause} actorassoc0_.id ) ( FromClause{level=1} ( ActorAssociation actorassoc0_ ( Film film1_ Actor actor2_ ) ) ) ( where ( and ( = ( film1_.id film1_.id id ) ? ) ( = ( actor2_.id actor2_.id id ) ? ) ) ) )
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity ActorAssociation): [ActorAssociation]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    |     \-FromElement
    |        \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  | path: generatedAlias1.id
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  |  | originalText: generatedAlias1
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: id
          |  \-ParameterNode
          \-BinaryLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: generatedAlias2.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: generatedAlias2
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-ParameterNode

2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [ActorAssociation actorassoc0_]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Film film1_ on actorassoc0_.film_id=film1_.id]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select >> end [level=1, statement=select]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Film,Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actorassoc0_.id as id1_1_' {alias=generatedAlias0, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[generatedAlias0, generatedAlias2, generatedAlias1], fromElementByTableAlias=[actor2_, actorassoc0_, film1_], fromElementsByPath=[generatedAlias0.film, generatedAlias0.actor], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=ActorAssociation,tableAlias=actorassoc0_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Film film1_ on actorassoc0_.film_id=film1_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
    |        \-[JOIN_FRAGMENT] FromElement: 'left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'film1_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias1.id,tableAlias=film1_,className=org.example.ukrflix.model.Film,classAlias=generatedAlias1}
          |  |  +-[ALIAS_REF] IdentNode: 'film1_.id' {alias=generatedAlias1, className=org.example.ukrflix.model.Film, tableAlias=film1_}
          |  |  \-[IDENT] IdentNode: 'id' {originalText=id}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.IntegerType@276961df}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'actor2_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias2.id,tableAlias=actor2_,className=org.example.ukrflix.model.Actor,classAlias=generatedAlias2}
             |  +-[ALIAS_REF] IdentNode: 'actor2_.id' {alias=generatedAlias2, className=org.example.ukrflix.model.Actor, tableAlias=actor2_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[NAMED_PARAM] ParameterNode: '?' {name=param1, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - SQL: select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Actor#2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Configured EntityCopyObserver strategy: disallow
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Static select for action ACTION_MERGE on entity org.example.ukrflix.model.ActorAssociation: select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#2], EntityKey[org.example.ukrflix.model.Film#1], EntityKey[org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Done entity load
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=2, role='null'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}]}, Film{id=2, name='Fast & Furious', release_date=2001-10-18, price=22, actorAssociations=[ActorAssociation{id=2, role='null'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Processing flush-time cascades
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Dirty checking collections
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#2], was: [org.example.ukrflix.model.Actor.films#2] (initialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#1], was: [org.example.ukrflix.model.Film.actorAssociations#1] (initialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#1], was: [org.example.ukrflix.model.Film.purchases#1] (uninitialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#4], was: [org.example.ukrflix.model.Actor.films#4] (initialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#1], was: [org.example.ukrflix.model.Actor.films#1] (initialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#2], was: [org.example.ukrflix.model.Film.actorAssociations#2] (initialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#2], was: [org.example.ukrflix.model.Film.purchases#2] (uninitialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#3], was: [org.example.ukrflix.model.Film.actorAssociations#3] (initialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#3], was: [org.example.ukrflix.model.Film.purchases#3] (uninitialized)
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 insertions, 0 updates, 0 deletions to 12 objects
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 9 collections
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - Listing entities:
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1969-02-11, films=[org.example.ukrflix.model.Film#1], firstname=Jennifer, id=4, lastname=Aniston}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=<uninitialized>, release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#4, role=dfsa, id=8, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=fasfd, id=7, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=, id=9, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=<uninitialized>, release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#7, org.example.ukrflix.model.ActorAssociation#8, org.example.ukrflix.model.ActorAssociation#9], purchases=<uninitialized>, release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 10:16:18 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - begin
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `name` : value = Avatar
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = fasfd
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 4
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = dfsa
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = 
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `name` : value = Menu
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `price` : value = 22
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 3
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = null
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 3
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = 
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 2
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = null
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - committing
2023-05-09 10:16:18 DEBUG [http-nio-8080-exec-6]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:16:47 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@ba8a1dc

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:16:48 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:16:48 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:16:48 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:16:48 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:16:48 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:16:49 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:16:49 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:16:49 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@491b5bd9
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@69c70b62
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@68603829
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@673ade3d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@7b3d759f
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5f160f9c
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2f29400e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@79462469
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@79462469
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@2f84848e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@729f8c5d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19a7e618
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@700f356b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1f9a472e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@17d90f81
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@31475919
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@31475919
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@136cd71b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@59171a5d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@32c503d3
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@8eb1297
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5841716b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78a894fe
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@5cbb2b1d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@4098a6b0
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6ddf3c5e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4a1bb556
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@46969355
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@5a0d25ba
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@2dc199d4
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@20b54b6e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@29f94912
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@8d0d52a
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6aa7ea23
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@5a342baf
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@57832650
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@731ccdfc
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4b68d2a6
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@42010bc8
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4ff2ac2d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@6d16aae3
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@71b253b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@6f1af8c3
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3e64cf62
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@4481a37f
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@3b590d21
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5c8d22de
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@e13cc49
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@4dc24d88
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@59f4df4e
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@4b98900b
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@ae094e8
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@56b9a73c
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2e3ec0e9
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@202e0ff4
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@19e78fa
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@357f7e2d
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30396acf
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@60389293
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@12136fc6
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@5cd3f5bf
2023-05-09 10:16:49 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@274783f8
2023-05-09 10:16:49 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422] into BootstrapContext; was [null]
2023-05-09 10:16:49 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422) [was null]
2023-05-09 10:16:49 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@59f0f273] into BootstrapContext; was [null]
2023-05-09 10:16:49 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@553c74cc] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@79a68d19]
2023-05-09 10:16:50 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:16:50 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@17e71422]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:16:50 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:16:51 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:16:51 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:16:51 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:16:51 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:16:51 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:16:51 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:16:51 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:16:51 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@788b0c96]
2023-05-09 10:16:51 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:51 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:16:51 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:51 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:16:51 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:16:51 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:16:51 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:51 DEBUG [main]: - Building property id
2023-05-09 10:16:51 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:51 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:16:51 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:16:51 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:16:51 DEBUG [main]: - Building property birthday
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:51 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:52 DEBUG [main]: - Building property films
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:16:52 DEBUG [main]: - Building property firstname
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:16:52 DEBUG [main]: - Building property lastname
2023-05-09 10:16:52 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:52 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:16:52 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:16:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Building property id
2023-05-09 10:16:52 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Building property actor
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Building property film
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:16:52 DEBUG [main]: - Building property role
2023-05-09 10:16:52 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:52 DEBUG [main]: - Import with entity name Film
2023-05-09 10:16:52 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:16:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Building property id
2023-05-09 10:16:52 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:52 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:52 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:16:52 DEBUG [main]: - Building property description
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:16:52 DEBUG [main]: - Building property img_src
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:16:52 DEBUG [main]: - Building property name
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:16:52 DEBUG [main]: - Building property price
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:16:52 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:16:52 DEBUG [main]: - Building property purchases
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:16:52 DEBUG [main]: - Building property release_date
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:16:52 DEBUG [main]: - Building property yt_src
2023-05-09 10:16:52 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:52 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:16:52 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:16:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Building property id
2023-05-09 10:16:52 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Building property film
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Building property user
2023-05-09 10:16:52 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:16:52 DEBUG [main]: - Import with entity name User
2023-05-09 10:16:52 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:16:52 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Building property id
2023-05-09 10:16:52 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:16:52 DEBUG [main]: - Building property account
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:16:52 DEBUG [main]: - Building property birthday
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:16:52 DEBUG [main]: - Building property email
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:16:52 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:16:52 DEBUG [main]: - Building property films
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:16:52 DEBUG [main]: - Building property firstname
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:16:52 DEBUG [main]: - Building property lastname
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:16:52 DEBUG [main]: - Building property login
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:16:52 DEBUG [main]: - Building property password
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:16:52 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:16:52 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:16:52 DEBUG [main]: - Building property phone
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:16:52 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:16:52 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:16:52 DEBUG [main]: - Building property purchases
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:16:52 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:16:52 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:16:52 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:16:52 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:16:52 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:16:52 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:16:52 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:16:52 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:16:52 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:16:52 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:52 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:52 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:16:52 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:52 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:16:52 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:16:52 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:16:52 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:52 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:16:52 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:16:52 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:16:52 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:16:52 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:16:52 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:16:52 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:16:52 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:16:52 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:16:52 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:16:52 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:16:52 DEBUG [main]: - Building session factory
2023-05-09 10:16:52 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:16:52 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:16:52 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:16:52 DEBUG [main]: - Statistics: disabled
2023-05-09 10:16:52 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:16:52 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:16:52 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:16:52 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:16:52 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:16:52 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:16:52 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:16:52 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:16:52 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:16:52 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:16:52 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:16:52 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:16:52 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:16:52 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:16:52 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:16:52 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:16:52 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:16:52 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:16:52 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:16:52 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:16:52 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:16:52 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:16:52 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:16:52 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:16:52 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:16:52 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:16:52 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:16:52 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:16:52 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:16:52 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:16:52 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:16:52 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:16:52 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:16:52 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:16:52 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:52 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:52 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:16:52 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@cc4d929, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@556d8c78, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:16:52 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:16:52 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:16:52 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:16:52 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:16:52 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:16:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:16:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:16:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@64ec804f, groups=[Ljava.lang.Class;@5008c5a}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:16:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:16:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:16:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@73b77d07, groups=[Ljava.lang.Class;@7f66d549}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@623c62b9, groups=[Ljava.lang.Class;@7af65b49}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@32e14e55, groups=[Ljava.lang.Class;@7b6419dd}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@a83c657, groups=[Ljava.lang.Class;@51729c2b}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:16:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7d66a634, groups=[Ljava.lang.Class;@39008911}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@53365a58, groups=[Ljava.lang.Class;@3f2f5454}, constraintType=GENERIC}.
2023-05-09 10:16:53 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:53 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:16:53 DEBUG [main]: - Instantiated session factory
2023-05-09 10:16:53 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7aab77f] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@6f78d086]
2023-05-09 10:16:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:53 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:53 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:16:53 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:16:54 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:16:54 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:16:54 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:16:54 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:16:54 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:16:54 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:16:54 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:16:54 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:16:54 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:16:54 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:16:54 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:16:54 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:16:54 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:16:54 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:16:54 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:16:54 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:16:54 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:16:54 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:16:54 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:16:54 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:16:54 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:16:54 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:16:54 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:16:54 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:16:54 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:16:54 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:16:54 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:16:54 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:16:54 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:16:54 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10d28ee2]
2023-05-09 10:16:54 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@753bfb4b]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f578eb]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@368814bb]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@288c16a5]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:16:55 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:16:55 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:16:55 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:16:55 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@210d1b45]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7e2f1454]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35b1e5e5]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@129bc797]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5e805a0d]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2bd89b8e]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:16:55 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:16:55 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:16:55 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:16:55 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e40707]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3182b7a2]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6622f6b4]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@398e1a48]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73d8f219]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a4dea70]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:16:55 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:16:55 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:16:55 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:16:55 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7892d7a7]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@19a5d711]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c89133]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@67a02460]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@242270ae]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@620978eb]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:16:55 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:16:55 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:16:55 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:16:55 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:16:55 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c288a4e]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1529406e]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bb92a71]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@68317dc0]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5ae93815]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6d0937e]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7da7a932]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4d9ef371]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d303dc9]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@671f70bc]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@244ba147]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b65081d]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@525dd5af]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@11675922]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e0d722f]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a621df3]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f600254]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21ec7946]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@652e4bb6]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@251d3913]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@435a2e1f]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2b60acb3]
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a99f50e]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:16:55 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@234a8c1f]
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:16:55 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:16:55 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:16:55 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:16:55 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:16:55 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:16:55 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:16:55 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:16:55 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:16:55 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:16:55 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:16:55 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:16:55 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:16:55 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:16:55 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@7c53d3c
2023-05-09 10:16:55 DEBUG [main]: - Registering SessionFactory: 5e3c92b6-662d-4b1d-ad2d-844235a92244 (<unnamed>)
2023-05-09 10:16:55 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:16:56 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:16:57 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@34f195e8
2023-05-09 10:16:57 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:16:57 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:16:57 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:16:57 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:16:57 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@45fa7f1a
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:57 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:16:57 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:16:57 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:16:57 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:16:57 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:16:57 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:16:57 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:57 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:16:57 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:16:57 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:16:57 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:16:57 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:16:57 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:16:57 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:16:57 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:16:57 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:16:57 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:16:57 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:16:57 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:16:57 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:16:57 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:16:57 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:16:57 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:16:57 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:16:57 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@45fa7f1a}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:16:57 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:16:57 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:16:57 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:16:57 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:16:57 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:57 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:57 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:57 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:16:59 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:16:59 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:16:59 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:16:59 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:16:59 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:16:59 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:16:59 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:16:59 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:16:59 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:16:59 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:16:59 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:16:59 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:16:59 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:16:59 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = fasfd
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:17:00 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - parse() - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'example'
    |  |  |  |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |  |  |  |  \-[IDENT] Node: 'model'
    |  |  |  |  \-[IDENT] Node: 'ActorAssociation'
    |  |  |  \-[ALIAS] Node: 'generatedAlias0'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'generatedAlias0'
    |  |  |  |  \-[IDENT] Node: 'film'
    |  |  |  \-[ALIAS] Node: 'generatedAlias1'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'generatedAlias0'
    |  |     |  \-[IDENT] Node: 'actor'
    |  |     \-[ALIAS] Node: 'generatedAlias2'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'generatedAlias1'
          |  |  \-[IDENT] Node: 'id'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'param0'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'generatedAlias2'
             |  \-[IDENT] Node: 'id'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'param1'

2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select << begin [level=1, statement=select]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.ActorAssociation (generatedAlias0) -> actorassoc0_
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for film in org.example.ukrflix.model.ActorAssociation (generatedAlias1) parent = [ {null} ]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Film (generatedAlias1) -> film1_
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.film -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=null,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.film -> actorassoc0_.film_id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Film film1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}

2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for actor in org.example.ukrflix.model.ActorAssociation (generatedAlias2) parent = [ {null} ]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Actor (generatedAlias2) -> actor2_
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.actor -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=null,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.actor -> actorassoc0_.actor_id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Actor actor2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}

2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1 -> film1_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1.id -> film1_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2 -> actor2_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@276961df
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2.id -> actor2_.id
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select : finishing up [level=1, statement=select]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - processQuery() :  ( SELECT ( {select clause} actorassoc0_.id ) ( FromClause{level=1} ( ActorAssociation actorassoc0_ ( Film film1_ Actor actor2_ ) ) ) ( where ( and ( = ( film1_.id film1_.id id ) ? ) ( = ( actor2_.id actor2_.id id ) ? ) ) ) )
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity ActorAssociation): [ActorAssociation]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    |     \-FromElement
    |        \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  | path: generatedAlias1.id
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  |  | originalText: generatedAlias1
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: id
          |  \-ParameterNode
          \-BinaryLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: generatedAlias2.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: generatedAlias2
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-ParameterNode

2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [ActorAssociation actorassoc0_]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Film film1_ on actorassoc0_.film_id=film1_.id]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select >> end [level=1, statement=select]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Film,Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actorassoc0_.id as id1_1_' {alias=generatedAlias0, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[generatedAlias0, generatedAlias2, generatedAlias1], fromElementByTableAlias=[actor2_, actorassoc0_, film1_], fromElementsByPath=[generatedAlias0.film, generatedAlias0.actor], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=ActorAssociation,tableAlias=actorassoc0_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Film film1_ on actorassoc0_.film_id=film1_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
    |        \-[JOIN_FRAGMENT] FromElement: 'left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'film1_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias1.id,tableAlias=film1_,className=org.example.ukrflix.model.Film,classAlias=generatedAlias1}
          |  |  +-[ALIAS_REF] IdentNode: 'film1_.id' {alias=generatedAlias1, className=org.example.ukrflix.model.Film, tableAlias=film1_}
          |  |  \-[IDENT] IdentNode: 'id' {originalText=id}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.IntegerType@276961df}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'actor2_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias2.id,tableAlias=actor2_,className=org.example.ukrflix.model.Actor,classAlias=generatedAlias2}
             |  +-[ALIAS_REF] IdentNode: 'actor2_.id' {alias=generatedAlias2, className=org.example.ukrflix.model.Actor, tableAlias=actor2_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[NAMED_PARAM] ParameterNode: '?' {name=param1, expectedType=org.hibernate.type.IntegerType@276961df}

2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - SQL: select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Actor#2
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Configured EntityCopyObserver strategy: disallow
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Static select for action ACTION_MERGE on entity org.example.ukrflix.model.ActorAssociation: select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#2], EntityKey[org.example.ukrflix.model.Film#1], EntityKey[org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = fasfd
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#7]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:05 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Done entity load
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=7, role='fasfd'}, ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Processing flush-time cascades
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Dirty checking collections
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#2], was: [org.example.ukrflix.model.Actor.films#2] (initialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#1], was: [org.example.ukrflix.model.Film.actorAssociations#1] (initialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#1], was: [org.example.ukrflix.model.Film.purchases#1] (uninitialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#4], was: [org.example.ukrflix.model.Actor.films#4] (initialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#1], was: [org.example.ukrflix.model.Actor.films#1] (initialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#2], was: [org.example.ukrflix.model.Film.actorAssociations#2] (initialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#2], was: [org.example.ukrflix.model.Film.purchases#2] (uninitialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#3], was: [org.example.ukrflix.model.Film.actorAssociations#3] (initialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#3], was: [org.example.ukrflix.model.Film.purchases#3] (uninitialized)
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 insertions, 0 updates, 1 deletions to 12 objects
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 9 collections
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - Listing entities:
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1969-02-11, films=[org.example.ukrflix.model.Film#1], firstname=Jennifer, id=4, lastname=Aniston}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=<uninitialized>, release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#4, role=dfsa, id=8, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=fasfd, id=7, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=, id=9, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=<uninitialized>, release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#7, org.example.ukrflix.model.ActorAssociation#8, org.example.ukrflix.model.ActorAssociation#9], purchases=<uninitialized>, release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - delete from ActorAssociation where id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-2]: - HHH000420: Closing un-released batch
2023-05-09 10:17:06 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:17:06 DEBUG [http-nio-8080-exec-3]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:17:11 DEBUG [http-nio-8080-exec-4]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:11 DEBUG [http-nio-8080-exec-4]: - begin
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = 
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 3
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = null
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 3
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = 
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 2
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = null
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - committing
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Result set row: 0
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Result row: EntityKey[org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Result set row: 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Result row: EntityKey[org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 3
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = null
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 3
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = 
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `price` : value = 22
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 2
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = null
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `film` : value = 1
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Processing attribute `role` : value = 
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:12 DEBUG [http-nio-8080-exec-4]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - begin
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = 
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 3
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = null
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 3
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = 
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 2
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = null
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - committing
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - begin
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 3
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = null
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 3
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = 
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 2
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = null
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `film` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing attribute `role` : value = 
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done loading collection
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Done entity load : org.example.ukrflix.model.Actor#2
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - committing
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - begin
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Executing identity-insert immediately
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Natively generated identity: 10
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - HHH000387: ResultSet's statement was not registered
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - committing
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Processing flush-time cascades
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Dirty checking collections
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - Listing entities:
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-5]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=10, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:14 INFO  [http-nio-8080-exec-5]: - actor id = 2 was added successfully
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - begin
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `price` : value = 22
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 1
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:14 DEBUG [http-nio-8080-exec-6]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 1
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = 
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 1
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = 
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `price` : value = 22
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 3
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = null
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 3
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = 
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `price` : value = 22
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `film` : value = 2
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Processing attribute `role` : value = null
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done loading collection
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - committing
2023-05-09 10:17:15 DEBUG [http-nio-8080-exec-6]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Result set row: 0
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done entity load : org.example.ukrflix.model.Actor#4
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 3
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = null
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 3
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = null
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - begin
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Result set row: 0
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Result row: EntityKey[org.example.ukrflix.model.Actor#4], EntityKey[org.example.ukrflix.model.Film#1], EntityKey[org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 4
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = dfsa
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#8]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 3
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = null
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 3
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `film` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing attribute `role` : value = null
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Found row of collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Done entity load
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Reset storedSnapshot to [ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}, ActorAssociation{id=10, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=8, role='dfsa'}, ActorAssociation{id=9, role=''}, ActorAssociation{id=10, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - committing
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Processing flush-time cascades
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Dirty checking collections
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Actor.films#4], was: [org.example.ukrflix.model.Actor.films#4] (initialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#1], was: [org.example.ukrflix.model.Film.actorAssociations#1] (initialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Film.purchases#1], was: [org.example.ukrflix.model.Film.purchases#1] (uninitialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Actor.films#1], was: [org.example.ukrflix.model.Actor.films#1] (initialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Actor.films#2], was: [org.example.ukrflix.model.Actor.films#2] (initialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#3], was: [org.example.ukrflix.model.Film.actorAssociations#3] (initialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Film.purchases#3], was: [org.example.ukrflix.model.Film.purchases#3] (uninitialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#2], was: [org.example.ukrflix.model.Film.actorAssociations#2] (initialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Collection found: [org.example.ukrflix.model.Film.purchases#2], was: [org.example.ukrflix.model.Film.purchases#2] (uninitialized)
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Flushed: 0 insertions, 0 updates, 1 deletions to 12 objects
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 9 collections
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - Listing entities:
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.Actor{birthday=1969-02-11, films=[org.example.ukrflix.model.Film#1], firstname=Jennifer, id=4, lastname=Aniston}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=<uninitialized>, release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#4, role=dfsa, id=8, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=10, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=, id=9, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=<uninitialized>, release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#8, org.example.ukrflix.model.ActorAssociation#9, org.example.ukrflix.model.ActorAssociation#10], purchases=<uninitialized>, release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - delete from ActorAssociation where id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-8]: - HHH000420: Closing un-released batch
2023-05-09 10:17:26 INFO  [http-nio-8080-exec-8]: - deleted successfully
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - begin
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `film` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `film` : value = 3
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `role` : value = null
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `film` : value = 3
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `role` : value = 
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `price` : value = 22
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `film` : value = 2
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Processing attribute `role` : value = null
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done loading collection
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - committing
2023-05-09 10:17:26 DEBUG [http-nio-8080-exec-9]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - begin
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `price` : value = 22
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `film` : value = 1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `role` : value = 
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `film` : value = 1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `role` : value = 
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `price` : value = 22
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done loading collection
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `film` : value = 3
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `role` : value = null
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `film` : value = 3
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `role` : value = 
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done loading collection
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `price` : value = 22
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done loading collection
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `film` : value = 2
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `role` : value = null
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done loading collection
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - committing
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Result set row: 0
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Result row: EntityKey[org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Result set row: 1
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Result row: EntityKey[org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Resolving attributes for [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `birthday` : value = 1969-02-11
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `firstname` : value = Jennifer
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Processing attribute `lastname` : value = Aniston
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done materializing entity [org.example.ukrflix.model.Actor#4]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Loading collection: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#4]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done loading collection
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:29 DEBUG [http-nio-8080-exec-10]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Result set contains (possibly empty) collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Actor#3
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Executing identity-insert immediately
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Natively generated identity: 11
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - HHH000387: ResultSet's statement was not registered
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Processing flush-time cascades
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Dirty checking collections
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - Listing entities:
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-1]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#3, role=, id=11, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:17:31 INFO  [http-nio-8080-exec-1]: - actor id = 3 was added successfully
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 3
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 10:17:31 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:18:51 DEBUG [main]: - PersistenceUnitInfo [
	name: default
	persistence provider classname: null
	classloader: ParallelWebappClassLoader
  context: ukrflix-ui
  delegate: false
----------> Parent Classloader:
java.net.URLClassLoader@3581c5f3

	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/vladi/Documents/NAU/ExternalLab/Tasks/ukrflix/ukrflix-ui/target/classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		org.example.ukrflix.model.Actor
		org.example.ukrflix.model.ActorAssociation
		org.example.ukrflix.model.Film
		org.example.ukrflix.model.Purchase
		org.example.ukrflix.model.User]
	Mapping files names []
	Properties []
2023-05-09 10:18:51 DEBUG [main]: - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2023-05-09 10:18:51 DEBUG [main]: - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2023-05-09 10:18:51 DEBUG [main]: - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-05-09 10:18:51 INFO  [main]: - HHH000412: Hibernate ORM core version 5.5.6
2023-05-09 10:18:51 DEBUG [main]: - HHH000206: hibernate.properties not found
2023-05-09 10:18:52 DEBUG [main]: - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2023-05-09 10:18:52 DEBUG [main]: - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2023-05-09 10:18:52 INFO  [main]: - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@dc6c5ca
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration boolean -> org.hibernate.type.BooleanType@dc6c5ca
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@dc6c5ca
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@4105b1d2
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration true_false -> org.hibernate.type.TrueFalseType@61f9cab2
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration yes_no -> org.hibernate.type.YesNoType@5c3b3f04
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@1972346b
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration byte -> org.hibernate.type.ByteType@1972346b
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@1972346b
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration character -> org.hibernate.type.CharacterType@13cdfd26
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration char -> org.hibernate.type.CharacterType@13cdfd26
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@13cdfd26
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@4015ebf1
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration short -> org.hibernate.type.ShortType@4015ebf1
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@4015ebf1
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration integer -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration int -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@1ff02deb
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration long -> org.hibernate.type.LongType@1ff02deb
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Long -> org.hibernate.type.LongType@1ff02deb
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@3e9afede
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration float -> org.hibernate.type.FloatType@3e9afede
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@3e9afede
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@f5a1b27
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration double -> org.hibernate.type.DoubleType@f5a1b27
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@f5a1b27
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@18161415
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@18161415
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@29e94753
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@29e94753
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration string -> org.hibernate.type.StringType@367026f
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.String -> org.hibernate.type.StringType@367026f
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@12f1b76c
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@61f26cba
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration url -> org.hibernate.type.UrlType@6d7a6abf
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.net.URL -> org.hibernate.type.UrlType@6d7a6abf
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration Duration -> org.hibernate.type.DurationType@32be0ebd
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@32be0ebd
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration Instant -> org.hibernate.type.InstantType@3b2b9b96
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@3b2b9b96
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@15e8918
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@15e8918
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@c822a3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@c822a3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@533053b4
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@533053b4
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@11763e57
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@11763e57
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@62f11904
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@62f11904
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@6852c3d2
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@6852c3d2
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration date -> org.hibernate.type.DateType@cbbc0ac
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.sql.Date -> org.hibernate.type.DateType@cbbc0ac
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration time -> org.hibernate.type.TimeType@787073b3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@787073b3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration timestamp -> org.hibernate.type.TimestampType@5e9650d3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@5e9650d3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@5e9650d3
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@c083cec
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration calendar -> org.hibernate.type.CalendarType@64a552
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@64a552
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@64a552
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@7f8589b1
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration calendar_time -> org.hibernate.type.CalendarTimeType@7d5b1446
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration locale -> org.hibernate.type.LocaleType@224bff6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@224bff6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration currency -> org.hibernate.type.CurrencyType@36f329e7
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@36f329e7
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6e2ab1f4
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6e2ab1f4
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration class -> org.hibernate.type.ClassType@6aca85da
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@6aca85da
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@19bd1f98
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@19bd1f98
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@5f160f9c
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration binary -> org.hibernate.type.BinaryType@66161fee
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration byte[] -> org.hibernate.type.BinaryType@66161fee
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration [B -> org.hibernate.type.BinaryType@66161fee
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@56b5de49
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@56b5de49
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@56b5de49
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration row_version -> org.hibernate.type.RowVersionType@3341ba8e
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration image -> org.hibernate.type.ImageType@3413effc
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration characters -> org.hibernate.type.CharArrayType@5c1348c6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration char[] -> org.hibernate.type.CharArrayType@5c1348c6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration [C -> org.hibernate.type.CharArrayType@5c1348c6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@680f7a5e
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@680f7a5e
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@680f7a5e
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration text -> org.hibernate.type.TextType@31829b82
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration ntext -> org.hibernate.type.NTextType@6e04275e
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration blob -> org.hibernate.type.BlobType@44264fb6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@44264fb6
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@249a7ccc
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration clob -> org.hibernate.type.ClobType@13e6b26c
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@13e6b26c
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration nclob -> org.hibernate.type.NClobType@78b9d614
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@78b9d614
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@6f286e1d
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@2079ce51
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration serializable -> org.hibernate.type.SerializableType@766f2d65
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration object -> org.hibernate.type.ObjectType@5cbb2b1d
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5cbb2b1d
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1cc07127
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@23867b97
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@6b83b137
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4098a6b0
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@5f4ebecd
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@4f042c70
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@39f826ae
2023-05-09 10:18:53 DEBUG [main]: - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@3c50ba07
2023-05-09 10:18:53 DEBUG [main]: - Injecting JPA temp ClassLoader [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7] into BootstrapContext; was [null]
2023-05-09 10:18:53 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7) [was null]
2023-05-09 10:18:53 DEBUG [main]: - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@22796ead] into BootstrapContext; was [null]
2023-05-09 10:18:53 DEBUG [main]: - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@7107a4a3] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@a95807f]
2023-05-09 10:18:53 DEBUG [main]: - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7]
2023-05-09 10:18:53 DEBUG [main]: - ClassLoaderAccessImpl#injectTempClassLoader(null) [was org.springframework.instrument.classloading.SimpleThrowawayClassLoader@112ec8a7]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-05-09 10:18:53 DEBUG [main]: - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-05-09 10:18:54 DEBUG [main]: - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2023-05-09 10:18:54 DEBUG [main]: - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2023-05-09 10:18:54 DEBUG [main]: - JDBC version : 4.2
2023-05-09 10:18:54 INFO  [main]: - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2023-05-09 10:18:54 DEBUG [main]: - JDBC driver metadata reported database stores quoted identifiers in more than one case
2023-05-09 10:18:54 DEBUG [main]: - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2023-05-09 10:18:54 DEBUG [main]: - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-05-09 10:18:54 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ff5aa42] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6ee9fcac]
2023-05-09 10:18:54 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Actor
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:18:55 DEBUG [main]: - Import with entity name Actor
2023-05-09 10:18:55 DEBUG [main]: - Bind entity org.example.ukrflix.model.Actor on table Actor
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:18:55 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:id]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Building property id
2023-05-09 10:18:55 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:birthday]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:18:55 DEBUG [main]: - Building property birthday
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Collection role: org.example.ukrflix.model.Actor.films
2023-05-09 10:18:55 DEBUG [main]: - Building property films
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:firstname]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:18:55 DEBUG [main]: - Building property firstname
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Actor), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Actor:lastname]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:18:55 DEBUG [main]: - Building property lastname
2023-05-09 10:18:55 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:18:55 DEBUG [main]: - Import with entity name ActorAssociation
2023-05-09 10:18:55 DEBUG [main]: - Bind entity org.example.ukrflix.model.ActorAssociation on table ActorAssociation
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:18:55 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:id]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Building property id
2023-05-09 10:18:55 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actor_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=actor, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Building property actor
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Building property film
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ActorAssociation), mappingColumn=role, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property role with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.ActorAssociation:role]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for role
2023-05-09 10:18:55 DEBUG [main]: - Building property role
2023-05-09 10:18:55 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Film
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:18:55 DEBUG [main]: - Import with entity name Film
2023-05-09 10:18:55 DEBUG [main]: - Bind entity org.example.ukrflix.model.Film on table Film
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:18:55 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:id]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Building property id
2023-05-09 10:18:55 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=actorAssociations_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='actorAssociations_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:18:55 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:18:55 DEBUG [main]: - Building property actorAssociations
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=description, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property description with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:description]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for description
2023-05-09 10:18:55 DEBUG [main]: - Building property description
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=img_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property img_src with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:img_src]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for img_src
2023-05-09 10:18:55 DEBUG [main]: - Building property img_src
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=name, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property name with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:name]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for name
2023-05-09 10:18:55 DEBUG [main]: - Building property name
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=price, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property price with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:price]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for price
2023-05-09 10:18:55 DEBUG [main]: - Building property price
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='film'}
2023-05-09 10:18:55 DEBUG [main]: - Collection role: org.example.ukrflix.model.Film.purchases
2023-05-09 10:18:55 DEBUG [main]: - Building property purchases
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=release_date, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property release_date with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:release_date]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for release_date
2023-05-09 10:18:55 DEBUG [main]: - Building property release_date
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Film), mappingColumn=yt_src, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property yt_src with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Film:yt_src]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for yt_src
2023-05-09 10:18:55 DEBUG [main]: - Building property yt_src
2023-05-09 10:18:55 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.Purchase
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:18:55 DEBUG [main]: - Import with entity name Purchase
2023-05-09 10:18:55 DEBUG [main]: - Bind entity org.example.ukrflix.model.Purchase on table Purchase
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:18:55 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.Purchase:id]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Building property id
2023-05-09 10:18:55 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=film, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Building property film
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Purchase), mappingColumn=user, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Building property user
2023-05-09 10:18:55 DEBUG [main]: - Binding entity from annotated class: org.example.ukrflix.model.User
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2023-05-09 10:18:55 DEBUG [main]: - Import with entity name User
2023-05-09 10:18:55 DEBUG [main]: - Bind entity org.example.ukrflix.model.User on table User
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=id, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:18:55 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property id with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:id]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Building property id
2023-05-09 10:18:55 DEBUG [main]: - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(id)]), id, identity, , ...)
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=account, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property account with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:account]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for account
2023-05-09 10:18:55 DEBUG [main]: - Building property account
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=birthday, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property birthday with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:birthday]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for birthday
2023-05-09 10:18:55 DEBUG [main]: - Building property birthday
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=email, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property email with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:email]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for email
2023-05-09 10:18:55 DEBUG [main]: - Building property email
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=films_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='films_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='user_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='film_id', referencedColumn='', mappedBy=''}
2023-05-09 10:18:55 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.films
2023-05-09 10:18:55 DEBUG [main]: - Building property films
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property firstname with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:firstname]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for firstname
2023-05-09 10:18:55 DEBUG [main]: - Building property firstname
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property lastname with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:lastname]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for lastname
2023-05-09 10:18:55 DEBUG [main]: - Building property lastname
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=login, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property login with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:login]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for login
2023-05-09 10:18:55 DEBUG [main]: - Building property login
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=password, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property password with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:password]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for password
2023-05-09 10:18:55 DEBUG [main]: - Building property password
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=phone, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - MetadataSourceProcessor property phone with lazy=false
2023-05-09 10:18:55 DEBUG [main]: - Attempting to locate auto-apply AttributeConverter for property [org.example.ukrflix.model.User:phone]
2023-05-09 10:18:55 DEBUG [main]: - building SimpleValue for phone
2023-05-09 10:18:55 DEBUG [main]: - Building property phone
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=null, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=element, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=purchases_KEY, insertable=true, updatable=true, unique=false}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='purchases_KEY', referencedColumn='null', mappedBy='null'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:18:55 DEBUG [main]: - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='user'}
2023-05-09 10:18:55 DEBUG [main]: - Collection role: org.example.ukrflix.model.User.purchases
2023-05-09 10:18:55 DEBUG [main]: - Building property purchases
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for role
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for description
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for img_src
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for name
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for price
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for release_date
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for yt_src
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for id
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for account
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for birthday
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for email
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for firstname
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for lastname
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for login
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for password
2023-05-09 10:18:55 DEBUG [main]: - Starting fillSimpleValue for phone
2023-05-09 10:18:55 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actor]
2023-05-09 10:18:55 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [actorassociation]
2023-05-09 10:18:55 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [film]
2023-05-09 10:18:55 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [purchase]
2023-05-09 10:18:55 DEBUG [main]: - Forcing column [id] to be non-null as it is part of the primary key for table [user]
2023-05-09 10:18:55 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.films
2023-05-09 10:18:55 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.User.films
2023-05-09 10:18:55 DEBUG [main]: - Mapped collection key: user_id, element: film_id
2023-05-09 10:18:55 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:18:55 DEBUG [main]: - Binding as ManyToMany: org.example.ukrflix.model.Actor.films
2023-05-09 10:18:55 DEBUG [main]: - Mapped collection key: actor_id, element: film_id
2023-05-09 10:18:55 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:18:55 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.actorAssociations through a foreign key
2023-05-09 10:18:55 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.actorAssociations -> ActorAssociation
2023-05-09 10:18:55 DEBUG [main]: - Retrieving property org.example.ukrflix.model.ActorAssociation.film
2023-05-09 10:18:55 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:18:55 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:18:55 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.Film.purchases through a foreign key
2023-05-09 10:18:55 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.Film.purchases -> Purchase
2023-05-09 10:18:55 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.film
2023-05-09 10:18:55 DEBUG [main]: - Mapped collection key: film_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:18:55 DEBUG [main]: - Second pass for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:18:55 DEBUG [main]: - Binding a OneToMany: org.example.ukrflix.model.User.purchases through a foreign key
2023-05-09 10:18:55 DEBUG [main]: - Mapping collection: org.example.ukrflix.model.User.purchases -> Purchase
2023-05-09 10:18:55 DEBUG [main]: - Retrieving property org.example.ukrflix.model.Purchase.user
2023-05-09 10:18:55 DEBUG [main]: - Mapped collection key: user_id, one-to-many: org.example.ukrflix.model.Purchase
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Actor
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.Film
2023-05-09 10:18:55 DEBUG [main]: - Resolving reference to class: org.example.ukrflix.model.User
2023-05-09 10:18:55 DEBUG [main]: - Building session factory
2023-05-09 10:18:55 DEBUG [main]: - SessionFactory name : null
2023-05-09 10:18:55 DEBUG [main]: - Automatic flush during beforeCompletion(): enabled
2023-05-09 10:18:55 DEBUG [main]: - Automatic session close at end of transaction: disabled
2023-05-09 10:18:55 DEBUG [main]: - Statistics: disabled
2023-05-09 10:18:55 DEBUG [main]: - Deleted entity synthetic identifier rollback: disabled
2023-05-09 10:18:55 DEBUG [main]: - Default entity-mode: pojo
2023-05-09 10:18:55 DEBUG [main]: - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2023-05-09 10:18:55 DEBUG [main]: - Allow initialization of lazy state outside session : disabled
2023-05-09 10:18:55 DEBUG [main]: - Using BatchFetchStyle : LEGACY
2023-05-09 10:18:55 DEBUG [main]: - Default batch fetch size: -1
2023-05-09 10:18:55 DEBUG [main]: - Maximum outer join fetch depth: 2
2023-05-09 10:18:55 DEBUG [main]: - Default null ordering: NONE
2023-05-09 10:18:55 DEBUG [main]: - Order SQL updates by primary key: disabled
2023-05-09 10:18:55 DEBUG [main]: - Order SQL inserts for batching: disabled
2023-05-09 10:18:55 DEBUG [main]: - multi-tenancy strategy : NONE
2023-05-09 10:18:55 DEBUG [main]: - JTA Track by Thread: enabled
2023-05-09 10:18:55 DEBUG [main]: - Query language substitutions: {}
2023-05-09 10:18:55 DEBUG [main]: - Named query checking : enabled
2023-05-09 10:18:55 DEBUG [main]: - Second-level cache: disabled
2023-05-09 10:18:55 DEBUG [main]: - Second-level query cache: disabled
2023-05-09 10:18:55 DEBUG [main]: - Second-level query cache factory: null
2023-05-09 10:18:55 DEBUG [main]: - Second-level cache region prefix: null
2023-05-09 10:18:55 DEBUG [main]: - Optimize second-level cache for minimal puts: disabled
2023-05-09 10:18:55 DEBUG [main]: - Structured second-level cache entries: disabled
2023-05-09 10:18:55 DEBUG [main]: - Second-level cache direct-reference entries: disabled
2023-05-09 10:18:55 DEBUG [main]: - Automatic eviction of collection cache: disabled
2023-05-09 10:18:55 DEBUG [main]: - JDBC batch size: 15
2023-05-09 10:18:55 DEBUG [main]: - JDBC batch updates for versioned data: enabled
2023-05-09 10:18:55 DEBUG [main]: - Scrollable result sets: enabled
2023-05-09 10:18:55 DEBUG [main]: - Wrap result sets: disabled
2023-05-09 10:18:55 DEBUG [main]: - JDBC3 getGeneratedKeys(): enabled
2023-05-09 10:18:55 DEBUG [main]: - JDBC result set fetch size: null
2023-05-09 10:18:55 DEBUG [main]: - Connection release mode: ON_CLOSE
2023-05-09 10:18:55 DEBUG [main]: - Generate SQL with comments: disabled
2023-05-09 10:18:55 DEBUG [main]: - JPA compliance - query : disabled
2023-05-09 10:18:55 DEBUG [main]: - JPA compliance - closed-handling : disabled
2023-05-09 10:18:55 DEBUG [main]: - JPA compliance - lists : disabled
2023-05-09 10:18:55 DEBUG [main]: - JPA compliance - transactions : disabled
2023-05-09 10:18:56 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:18:56 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:18:56 DEBUG [main]: - Session factory constructed with filter configurations : {}
2023-05-09 10:18:56 DEBUG [main]: - Instantiating session factory with properties: {java.specification.version=17, sun.cpu.isalist=amd64, hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD, sun.jnu.encoding=Cp1251, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\bootstrap.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\commons-daemon.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\bin\tomcat-juli.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\annotations-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ant.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ha.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-ssi.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-storeconfig.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina-tribes.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\catalina.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\ecj-4.20.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\el-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper-el.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jasper.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jaspic-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\jsp-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\servlet-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-api.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-coyote.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-dbcp.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-cs.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-de.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-es.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-fr.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ja.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ko.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-pt-BR.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-ru.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-i18n-zh-CN.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jdbc.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-jni.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util-scan.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-util.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\tomcat-websocket.jar;C:\Users\vladi\Documents\NAU\WebProjects\apache-tomcat-9.0.62-windows-x64\apache-tomcat-9.0.62\lib\websocket-api.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, catalina.useNaming=true, user.timezone=Europe/Berlin, jakarta.persistence.sharedCache.mode=UNSPECIFIED, user.country.format=UA, java.vm.specification.version=17, os.name=Windows 10, javax.persistence.validation.mode=AUTO, jakarta.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8, sun.java.launcher=SUN_STANDARD, user.country=RU, sun.boot.library.path=C:\Program Files\Java\jdk-17.0.1\bin, sun.java.command=org.apache.catalina.startup.Bootstrap start, javax.persistence.nonJtaDataSource=org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8, javax.persistence.sharedCache.mode=UNSPECIFIED, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\vladi, user.language=ru, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming, java.version.date=2021-10-19, java.home=C:\Program Files\Java\jdk-17.0.1, file.separator=\, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., jakarta.persistence.validation.mode=AUTO, hibernate.hbm2ddl.auto=validate, user.script=, server.loader=, java.util.logging.config.file=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui\conf\logging.properties, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=17.0.1+12-LTS-39, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, user.name=vova, hibernate.cache.use_query_cache=false, path.separator=;, common.loader="C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib","C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui/lib/*.jar", os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=default, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=false, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\vladi\AppData\Local\Temp\, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, catalina.home=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, java.version=17.0.1, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-ssi.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,derby-*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,ha-api-*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jaxws-rt-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, user.dir=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, sun.os.patch.level=, catalina.base=C:\Users\vladi\.SmartTomcat\ukrflix\ukrflix-ui, shared.loader=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.registry.StandardServiceRegistryBuilder$1@50d640dd, native.encoding=Cp1251, hibernate.cache.use_second_level_cache=false, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, java.library.path=C:\Program Files\Java\jdk-17.0.1\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\dotnet\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\vladi\AppData\Local\Programs\Python\Python310\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\vladi\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\bin;;C:\Users\vladi\.dotnet\tools;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.1+12-LTS-39, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, hibernate.connection.datasource=org.springframework.jdbc.datasource.DriverManagerDataSource@340d50c8, tomcat.util.buf.StringCache.byte.enabled=true, java.class.version=61.0}
2023-05-09 10:18:56 INFO  [main]: - HV000001: Hibernate Validator 5.0.0.Final
2023-05-09 10:18:56 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:18:56 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:18:56 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:18:56 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:18:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:18:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:18:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:18:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7ef9ce2b, groups=[Ljava.lang.Class;@6cf782b6}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:18:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:18:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:18:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@74889ebe, groups=[Ljava.lang.Class;@7f52aba0}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6ae67bf6, groups=[Ljava.lang.Class;@47fa54d}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@3432a612, groups=[Ljava.lang.Class;@5e57149f}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5f385ee9, groups=[Ljava.lang.Class;@39ad5a7d}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:18:56 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@1a445b5, groups=[Ljava.lang.Class;@4785f176}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@281edf6b, groups=[Ljava.lang.Class;@77d50cde}, constraintType=GENERIC}.
2023-05-09 10:18:56 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:18:56 DEBUG [main]: - Skipping JACC integration as it was not enabled
2023-05-09 10:18:56 DEBUG [main]: - Instantiated session factory
2023-05-09 10:18:56 DEBUG [main]: - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@ff5aa42] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@2ca08575]
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.ActorAssociation] is safe
2023-05-09 10:18:57 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.ActorAssociation
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#actor` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - To-one property `org.example.ukrflix.model.ActorAssociation#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:57 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Film] is safe
2023-05-09 10:18:57 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Film
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Purchase] is safe
2023-05-09 10:18:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Purchase
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#film` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - To-one property `org.example.ukrflix.model.Purchase#user` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-05-09 10:18:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.User] is safe
2023-05-09 10:18:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.User
2023-05-09 10:18:58 DEBUG [main]: - Not known whether passed class name [org.example.ukrflix.model.Actor] is safe
2023-05-09 10:18:58 DEBUG [main]: - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.ukrflix.model.Actor
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Actor.films
2023-05-09 10:18:58 DEBUG [main]: -  Row insert: insert into ActorAssociation (actor_id, film_id) values (?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Row update: update ActorAssociation set film_id=? where actor_id=? and film_id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row delete: delete from ActorAssociation where actor_id=? and film_id=?
2023-05-09 10:18:58 DEBUG [main]: -  One-shot delete: delete from ActorAssociation where actor_id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.films
2023-05-09 10:18:58 DEBUG [main]: -  Row insert: insert into Purchase (user_id, film_id) values (?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Row update: update Purchase set film_id=? where user_id=? and film_id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row delete: delete from Purchase where user_id=? and film_id=?
2023-05-09 10:18:58 DEBUG [main]: -  One-shot delete: delete from Purchase where user_id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.User.purchases
2023-05-09 10:18:58 DEBUG [main]: -  Row insert: update Purchase set user_id=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row delete: update Purchase set user_id=null where user_id=? and id=?
2023-05-09 10:18:58 DEBUG [main]: -  One-shot delete: update Purchase set user_id=null where user_id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: -  Row insert: update ActorAssociation set film_id=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row update: update ActorAssociation set  where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row delete: update ActorAssociation set film_id=null where film_id=? and id=?
2023-05-09 10:18:58 DEBUG [main]: -  One-shot delete: update ActorAssociation set film_id=null where film_id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for collection: org.example.ukrflix.model.Film.purchases
2023-05-09 10:18:58 DEBUG [main]: -  Row insert: update Purchase set film_id=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row update: update Purchase set  where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Row delete: update Purchase set film_id=null where film_id=? and id=?
2023-05-09 10:18:58 DEBUG [main]: -  One-shot delete: update Purchase set film_id=null where film_id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.ActorAssociation
2023-05-09 10:18:58 DEBUG [main]: -  Version select: select id from ActorAssociation where id =?
2023-05-09 10:18:58 DEBUG [main]: -  Snapshot select: select actorassoc_.id, actorassoc_.actor_id as actor_id3_1_, actorassoc_.film_id as film_id4_1_, actorassoc_.role as role2_1_ from ActorAssociation actorassoc_ where actorassoc_.id=?
2023-05-09 10:18:58 DEBUG [main]: -  Insert 0: insert into ActorAssociation (actor_id, film_id, role, id) values (?, ?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Update 0: update ActorAssociation set actor_id=?, film_id=?, role=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Delete 0: delete from ActorAssociation where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Identity insert: insert into ActorAssociation (actor_id, film_id, role) values (?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20110864]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7d19d465]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6fb07db6]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2f6a923d]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5a238d7e]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.ActorAssociation)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.ActorAssociation)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.ActorAssociation.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.ActorAssociation.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.ActorAssociation.film.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.ActorAssociation.film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.ActorAssociation)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(actor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Actor)
                - SQL table alias mapping - actor1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for entity org.example.ukrflix.model.ActorAssociation [NONE]: select actorassoc0_.id as id1_1_0_, actorassoc0_.actor_id as actor_id3_1_0_, actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.role as role2_1_0_, actor1_.id as id1_0_1_, actor1_.birthday as birthday2_0_1_, actor1_.firstname as firstnam3_0_1_, actor1_.lastname as lastname4_0_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Film
2023-05-09 10:18:58 DEBUG [main]: -  Version select: select id from Film where id =?
2023-05-09 10:18:58 DEBUG [main]: -  Snapshot select: select film_.id, film_.description as descript2_2_, film_.img_src as img_src3_2_, film_.name as name4_2_, film_.price as price5_2_, film_.release_date as release_6_2_, film_.yt_src as yt_src7_2_ from Film film_ where film_.id=?
2023-05-09 10:18:58 DEBUG [main]: -  Insert 0: insert into Film (description, img_src, name, price, release_date, yt_src, id) values (?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Update 0: update Film set description=?, img_src=?, name=?, price=?, release_date=?, yt_src=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Delete 0: delete from Film where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Identity insert: insert into Film (description, img_src, name, price, release_date, yt_src) values (?, ?, ?, ?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@46050be4]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3dbe3bc4]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@69c071db]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.actor
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6fb03f5]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.films
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : actorAssociations.actor.films
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.actor.lastname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.film
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : actorAssociations.film
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations.role
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7bf96c4e]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5dd7f921]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Film)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Film)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Film.actorAssociations)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>)
                - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Film.actorAssociations.<elements>.actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Film.purchases)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Film.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Film)
          - SQL table alias mapping - film0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}
          - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Film.actorAssociations)
                - SQL table alias mapping - actorassoc1_
                - alias suffix - 1_
                - suffixed key columns - {film_id4_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_1_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.ActorAssociation)
                      - SQL table alias mapping - actorassoc1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_1_2_}
                      - JOIN (JoinDefinedByMetadata(actor)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.Actor)
                            - SQL table alias mapping - actor2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Film [NONE]: select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Purchase
2023-05-09 10:18:58 DEBUG [main]: -  Version select: select id from Purchase where id =?
2023-05-09 10:18:58 DEBUG [main]: -  Snapshot select: select purchase_.id, purchase_.film_id as film_id2_3_, purchase_.user_id as user_id3_3_ from Purchase purchase_ where purchase_.id=?
2023-05-09 10:18:58 DEBUG [main]: -  Insert 0: insert into Purchase (film_id, user_id, id) values (?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Update 0: update Purchase set film_id=?, user_id=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Delete 0: delete from Purchase where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Identity insert: insert into Purchase (film_id, user_id) values (?, ?)
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@12d644a6]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@34ceabf1]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5cb63d05]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@656ac24]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.actorAssociations.actor
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7babfd29]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.actorAssociations.film
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : film.actorAssociations.film
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.actorAssociations.role
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@482f59f4]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Purchase)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Purchase)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Purchase.film)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Purchase.film.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>)
                   - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Purchase.film.actorAssociations.<elements>.actor)
          - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.Purchase.user)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Purchase)
          - SQL table alias mapping - purchase0_
          - alias suffix - 0_
          - suffixed key columns - {id1_3_0_}
          - JOIN (JoinDefinedByMetadata(film)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}
                - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:1> -> <gen:2>
                   - CollectionQuerySpaceImpl(uid=<gen:2>, collection=org.example.ukrflix.model.Film.actorAssociations)
                      - SQL table alias mapping - actorassoc2_
                      - alias suffix - 2_
                      - suffixed key columns - {film_id4_1_2_}
                      - entity-element alias suffix - 3_
                      - 3_entity-element suffixed key columns - id1_1_3_
                      - JOIN (JoinDefinedByMetadata(elements)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=org.example.ukrflix.model.ActorAssociation)
                            - SQL table alias mapping - actorassoc2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_1_3_}
          - JOIN (JoinDefinedByMetadata(user)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=org.example.ukrflix.model.User)
                - SQL table alias mapping - user3_
                - alias suffix - 4_
                - suffixed key columns - {id1_4_4_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Purchase [NONE]: select purchase0_.id as id1_3_0_, purchase0_.film_id as film_id2_3_0_, purchase0_.user_id as user_id3_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_, actorassoc2_.film_id as film_id4_1_2_, actorassoc2_.id as id1_1_2_, actorassoc2_.id as id1_1_3_, actorassoc2_.actor_id as actor_id3_1_3_, actorassoc2_.film_id as film_id4_1_3_, actorassoc2_.role as role2_1_3_, user3_.id as id1_4_4_, user3_.account as account2_4_4_, user3_.birthday as birthday3_4_4_, user3_.email as email4_4_4_, user3_.firstname as firstnam5_4_4_, user3_.lastname as lastname6_4_4_, user3_.login as login7_4_4_, user3_.password as password8_4_4_, user3_.phone as phone9_4_4_ from Purchase purchase0_ left outer join Film film1_ on purchase0_.film_id=film1_.id left outer join ActorAssociation actorassoc2_ on film1_.id=actorassoc2_.film_id left outer join User user3_ on purchase0_.user_id=user3_.id where purchase0_.id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.User
2023-05-09 10:18:58 DEBUG [main]: -  Version select: select id from User where id =?
2023-05-09 10:18:58 DEBUG [main]: -  Snapshot select: select user_.id, user_.account as account2_4_, user_.birthday as birthday3_4_, user_.email as email4_4_, user_.firstname as firstnam5_4_, user_.lastname as lastname6_4_, user_.login as login7_4_, user_.password as password8_4_, user_.phone as phone9_4_ from User user_ where user_.id=?
2023-05-09 10:18:58 DEBUG [main]: -  Insert 0: insert into User (account, birthday, email, firstname, lastname, login, password, phone, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Update 0: update User set account=?, birthday=?, email=?, firstname=?, lastname=?, login=?, password=?, phone=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Delete 0: delete from User where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Identity insert: insert into User (account, birthday, email, firstname, lastname, login, password, phone) values (?, ?, ?, ?, ?, ?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6c430548]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : account
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : email
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7a77ff45]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3bd05779]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6dbdfa38]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@546f0369]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.actorAssociations.actor
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d5a3ee]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.actorAssociations.film
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations.film
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.actorAssociations.role
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : films.purchases
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : login
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : password
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : phone
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.User)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.User)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.User.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.User.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>)
                      - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:5>, path=org.example.ukrflix.model.User.films.<elements>.actorAssociations.<elements>.actor)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.User)
          - SQL table alias mapping - user0_
          - alias suffix - 0_
          - suffixed key columns - {id1_4_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.User.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {user_id3_3_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}
                      - JOIN (JoinDefinedByMetadata(actorAssociations)) : <gen:2> -> <gen:3>
                         - CollectionQuerySpaceImpl(uid=<gen:3>, collection=org.example.ukrflix.model.Film.actorAssociations)
                            - SQL table alias mapping - actorassoc3_
                            - alias suffix - 3_
                            - suffixed key columns - {film_id4_1_3_}
                            - entity-element alias suffix - 4_
                            - 4_entity-element suffixed key columns - id1_1_4_
                            - JOIN (JoinDefinedByMetadata(elements)) : <gen:3> -> <gen:4>
                               - EntityQuerySpaceImpl(uid=<gen:4>, entity=org.example.ukrflix.model.ActorAssociation)
                                  - SQL table alias mapping - actorassoc3_
                                  - alias suffix - 4_
                                  - suffixed key columns - {id1_1_4_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for entity org.example.ukrflix.model.User [NONE]: select user0_.id as id1_4_0_, user0_.account as account2_4_0_, user0_.birthday as birthday3_4_0_, user0_.email as email4_4_0_, user0_.firstname as firstnam5_4_0_, user0_.lastname as lastname6_4_0_, user0_.login as login7_4_0_, user0_.password as password8_4_0_, user0_.phone as phone9_4_0_, films1_.user_id as user_id3_3_1_, film2_.id as film_id2_3_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_, actorassoc3_.film_id as film_id4_1_3_, actorassoc3_.id as id1_1_3_, actorassoc3_.id as id1_1_4_, actorassoc3_.actor_id as actor_id3_1_4_, actorassoc3_.film_id as film_id4_1_4_, actorassoc3_.role as role2_1_4_ from User user0_ left outer join Purchase films1_ on user0_.id=films1_.user_id left outer join Film film2_ on films1_.film_id=film2_.id left outer join ActorAssociation actorassoc3_ on film2_.id=actorassoc3_.film_id where user0_.id=?
2023-05-09 10:18:58 DEBUG [main]: - Static SQL for entity: org.example.ukrflix.model.Actor
2023-05-09 10:18:58 DEBUG [main]: -  Version select: select id from Actor where id =?
2023-05-09 10:18:58 DEBUG [main]: -  Snapshot select: select actor_.id, actor_.birthday as birthday2_0_, actor_.firstname as firstnam3_0_, actor_.lastname as lastname4_0_ from Actor actor_ where actor_.id=?
2023-05-09 10:18:58 DEBUG [main]: -  Insert 0: insert into Actor (birthday, firstname, lastname, id) values (?, ?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: -  Update 0: update Actor set birthday=?, firstname=?, lastname=? where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Delete 0: delete from Actor where id=?
2023-05-09 10:18:58 DEBUG [main]: -  Identity insert: insert into Actor (birthday, firstname, lastname) values (?, ?, ?)
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6e32eea5]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@aa24615]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@29ab7ccc]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : films.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.purchases
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5f7a911f]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d45db20]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : films.yt_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : lastname
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(entity=org.example.ukrflix.model.Actor)
    - Returns
       - EntityReturnImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:0>, path=org.example.ukrflix.model.Actor)
          - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:1>, path=org.example.ukrflix.model.Actor.films)
             - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=org.example.ukrflix.model.Actor.films.<elements>)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:3>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:4>, path=org.example.ukrflix.model.Actor.films.<elements>.purchases.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=org.example.ukrflix.model.Actor)
          - SQL table alias mapping - actor0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}
          - JOIN (JoinDefinedByMetadata(films)) : <gen:0> -> <gen:1>
             - CollectionQuerySpaceImpl(uid=<gen:1>, collection=org.example.ukrflix.model.Actor.films)
                - SQL table alias mapping - films1_
                - alias suffix - 1_
                - suffixed key columns - {actor_id3_1_1_}
                - entity-element alias suffix - 2_
                - 2_entity-element suffixed key columns - id1_2_2_
                - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for entity org.example.ukrflix.model.Actor [NONE]: select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@13bd25ab]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d1f6213]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@faa592b]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@49e3bd37]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Actor.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Actor.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Actor.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Actor.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.Actor.films].<elements>.purchases.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Actor.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {actor_id3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Actor.films: select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@687fa4d0]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@13666880]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5bfa2801]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7b787996]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : purchases
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : yt_src
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.films)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.films, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.films])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.films].<elements>)
             - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations)
                - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.films].<elements>.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.films)
          - SQL table alias mapping - films0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Film)
                - SQL table alias mapping - film1_
                - alias suffix - 1_
                - suffixed key columns - {id1_2_1_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.films: select films0_.user_id as user_id3_3_0_, films0_.film_id as film_id2_3_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from Purchase films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.user_id=?
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4f8aa5fe]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@33a1bff8]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ba2a958]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.actorAssociations
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@15fe48f5]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7ec65043]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.description
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.img_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.name
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.price
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : film.purchases
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.release_date
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film.yt_src
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : user
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.User.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.User.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.User.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.User.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Film, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.User.purchases].<elements>.film)
                - CollectionAttributeFetchImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:3>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:4>, path=[org.example.ukrflix.model.User.purchases].<elements>.film.actorAssociations.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.User.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {user_id3_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(film)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Film)
                      - SQL table alias mapping - film1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_2_2_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for collection org.example.ukrflix.model.User.purchases: select purchases0_.user_id as user_id3_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, film1_.id as id1_2_2_, film1_.description as descript2_2_2_, film1_.img_src as img_src3_2_2_, film1_.name as name4_2_2_, film1_.price as price5_2_2_, film1_.release_date as release_6_2_2_, film1_.yt_src as yt_src7_2_2_ from Purchase purchases0_ left outer join Film film1_ on purchases0_.film_id=film1_.id where purchases0_.user_id=?
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6a584533]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1cfb035c]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21e00efb]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.films
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : actor.films
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : actor.lastname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : role
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.actorAssociations)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.actorAssociations, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.actorAssociations])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.ActorAssociation, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.Actor, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.actorAssociations].<elements>.actor)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.actorAssociations)
          - SQL table alias mapping - actorassoc0_
          - alias suffix - 0_
          - suffixed key columns - {film_id4_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.ActorAssociation)
                - SQL table alias mapping - actorassoc0_
                - alias suffix - 1_
                - suffixed key columns - {id1_1_1_}
                - JOIN (JoinDefinedByMetadata(actor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.Actor)
                      - SQL table alias mapping - actor1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.actorAssociations: select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5ef99f75]
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a9d873b]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : film
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : film
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user
2023-05-09 10:18:58 DEBUG [main]: - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f0271e]
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.account
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.birthday
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.email
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.films
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : user.films
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.firstname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.lastname
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.login
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.password
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.phone
2023-05-09 10:18:58 DEBUG [main]: - Visiting attribute path : user.purchases
2023-05-09 10:18:58 DEBUG [main]: - Property path deemed to be circular : user.purchases
2023-05-09 10:18:58 DEBUG [main]: - Building LoadPlan...
2023-05-09 10:18:58 DEBUG [main]: - processing queryspace <gen:0>
2023-05-09 10:18:58 DEBUG [main]: - LoadPlan(collection=org.example.ukrflix.model.Film.purchases)
    - Returns
       - CollectionReturnImpl(collection=org.example.ukrflix.model.Film.purchases, querySpaceUid=<gen:0>, path=[org.example.ukrflix.model.Film.purchases])
          - (collection element) CollectionFetchableElementEntityGraph(entity=org.example.ukrflix.model.Purchase, querySpaceUid=<gen:1>, path=[org.example.ukrflix.model.Film.purchases].<elements>)
             - EntityAttributeFetchImpl(entity=org.example.ukrflix.model.User, querySpaceUid=<gen:2>, path=[org.example.ukrflix.model.Film.purchases].<elements>.user)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=org.example.ukrflix.model.Film.purchases)
          - SQL table alias mapping - purchases0_
          - alias suffix - 0_
          - suffixed key columns - {film_id2_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - id1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=org.example.ukrflix.model.Purchase)
                - SQL table alias mapping - purchases0_
                - alias suffix - 1_
                - suffixed key columns - {id1_3_1_}
                - JOIN (JoinDefinedByMetadata(user)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=org.example.ukrflix.model.User)
                      - SQL table alias mapping - user1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_4_2_}

2023-05-09 10:18:58 DEBUG [main]: - Static select for collection org.example.ukrflix.model.Film.purchases: select purchases0_.film_id as film_id2_3_0_, purchases0_.id as id1_3_0_, purchases0_.id as id1_3_1_, purchases0_.film_id as film_id2_3_1_, purchases0_.user_id as user_id3_3_1_, user1_.id as id1_4_2_, user1_.account as account2_4_2_, user1_.birthday as birthday3_4_2_, user1_.email as email4_4_2_, user1_.firstname as firstnam5_4_2_, user1_.lastname as lastname6_4_2_, user1_.login as login7_4_2_, user1_.password as password8_4_2_, user1_.phone as phone9_4_2_ from Purchase purchases0_ left outer join User user1_ on purchases0_.user_id=user1_.id where purchases0_.film_id=?
2023-05-09 10:18:58 DEBUG [main]: - No JtaPlatform was specified, checking resolver
2023-05-09 10:18:58 DEBUG [main]: - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-05-09 10:18:58 DEBUG [main]: - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:18:58 INFO  [main]: - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-05-09 10:18:58 DEBUG [main]: - Checking 0 named HQL queries
2023-05-09 10:18:58 DEBUG [main]: - Checking 0 named SQL queries
2023-05-09 10:18:59 DEBUG [main]: - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-05-09 10:18:59 DEBUG [main]: - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@c32b8b0
2023-05-09 10:18:59 DEBUG [main]: - Registering SessionFactory: 7b308a11-1575-463b-850a-8aab27d6046e (<unnamed>)
2023-05-09 10:18:59 DEBUG [main]: - Not binding SessionFactory to JNDI, no JNDI name configured
2023-05-09 10:18:59 DEBUG [main]: - Statistics initialized [enabled=false]
2023-05-09 10:19:00 DEBUG [main]: - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@1b9bb6e6
2023-05-09 10:19:00 DEBUG [main]: - parse() - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:19:00 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:19:00 DEBUG [main]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'example'
    |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'Actor'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[AND] Node: 'AND'
          +-[LIKE] Node: 'like'
          |  +-[METHOD_CALL] Node: '('
          |  |  +-[IDENT] Node: 'CONCAT'
          |  |  \-[EXPR_LIST] Node: 'exprList'
          |  |     +-[DOT] Node: '.'
          |  |     |  +-[IDENT] Node: 'a'
          |  |     |  \-[IDENT] Node: 'firstname'
          |  |     +-[QUOTED_STRING] Node: '' ''
          |  |     \-[DOT] Node: '.'
          |  |        +-[IDENT] Node: 'a'
          |  |        \-[IDENT] Node: 'lastname'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'search'
          \-[NOT_IN] Node: 'not in'
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'a'
             |  \-[IDENT] Node: 'id'
             \-[IN_LIST] Node: 'inList'
                \-[QUERY] Node: 'query'
                   +-[SELECT_FROM] Node: 'SELECT_FROM'
                   |  +-[FROM] Node: 'FROM'
                   |  |  \-[RANGE] Node: 'RANGE'
                   |  |     +-[DOT] Node: '.'
                   |  |     |  +-[DOT] Node: '.'
                   |  |     |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  +-[DOT] Node: '.'
                   |  |     |  |  |  |  +-[IDENT] Node: 'org'
                   |  |     |  |  |  |  \-[IDENT] Node: 'example'
                   |  |     |  |  |  \-[IDENT] Node: 'ukrflix'
                   |  |     |  |  \-[IDENT] Node: 'model'
                   |  |     |  \-[IDENT] Node: 'ActorAssociation'
                   |  |     \-[ALIAS] Node: 'af'
                   |  \-[SELECT] Node: 'SELECT'
                   |     \-[DOT] Node: '.'
                   |        +-[DOT] Node: '.'
                   |        |  +-[IDENT] Node: 'af'
                   |        |  \-[IDENT] Node: 'actor'
                   |        \-[IDENT] Node: 'id'
                   \-[WHERE] Node: 'WHERE'
                      \-[EQ] Node: '='
                         +-[DOT] Node: '.'
                         |  +-[DOT] Node: '.'
                         |  |  +-[IDENT] Node: 'af'
                         |  |  \-[IDENT] Node: 'film'
                         |  \-[IDENT] Node: 'id'
                         \-[COLON] Node: ':'
                            \-[IDENT] Node: 'filmId'

2023-05-09 10:19:00 DEBUG [main]: - select << begin [level=1, statement=select]
2023-05-09 10:19:00 DEBUG [main]: - FromClause{level=1} : org.example.ukrflix.model.Actor (a) -> actor0_
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : firstname -> org.hibernate.type.StringType@367026f
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a.firstname -> actor0_.firstname
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : lastname -> org.hibernate.type.StringType@367026f
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a.lastname -> actor0_.lastname
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a -> actor0_.id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:19:00 DEBUG [main]: - Resolved : a.id -> actor0_.id
2023-05-09 10:19:00 DEBUG [main]: - select << begin [level=2, statement=select]
2023-05-09 10:19:00 DEBUG [main]: - FromClause{level=2} : org.example.ukrflix.model.ActorAssociation (af) -> actorassoc1_
2023-05-09 10:19:00 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:19:00 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:19:00 DEBUG [main]: - Unresolved property path is now 'actor.id'
2023-05-09 10:19:00 DEBUG [main]: - Resolved : af.actor -> actorassoc1_.actor_id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : actor.id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:19:00 DEBUG [main]: - Resolved : af.actor.id -> actorassoc1_.actor_id
2023-05-09 10:19:00 DEBUG [main]: - Resolved : af -> actorassoc1_.id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:19:00 DEBUG [main]: - dereferenceShortcut() : property id in org.example.ukrflix.model.ActorAssociation does not require a join.
2023-05-09 10:19:00 DEBUG [main]: - Unresolved property path is now 'film.id'
2023-05-09 10:19:00 DEBUG [main]: - Resolved : af.film -> actorassoc1_.film_id
2023-05-09 10:19:00 DEBUG [main]: - getDataType() : film.id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:19:00 DEBUG [main]: - Resolved : af.film.id -> actorassoc1_.film_id
2023-05-09 10:19:00 DEBUG [main]: - select : finishing up [level=2, statement=select]
2023-05-09 10:19:00 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) )
2023-05-09 10:19:00 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    |  \-DotNode
    |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |    path: af.actor.id
    |     +-DotNode
    |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     | path: af.actor
    |     |  +-IdentNode
    |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |     |  | originalText: af
    |     |  \-IdentNode
    |     |    persister: null
    |     |    originalText: actor
    |     \-IdentNode
    |       persister: null
    |       originalText: id
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-BinaryLogicOperatorNode
          +-DotNode
          | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          | path: af.film.id
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  | path: af.film
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
          |  |  | originalText: af
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: film
          |  \-IdentNode
          |    persister: null
          |    originalText: id
          \-ParameterNode

2023-05-09 10:19:00 DEBUG [main]: - Using FROM fragment [ActorAssociation actorassoc1_]
2023-05-09 10:19:00 DEBUG [main]: - select >> end [level=2, statement=select]
2023-05-09 10:19:00 DEBUG [main]: - select : finishing up [level=1, statement=select]
2023-05-09 10:19:00 DEBUG [main]: - processQuery() :  ( SELECT ( {select clause} actor0_.id ) ( FromClause{level=1} Actor actor0_ ) ( WHERE ( AND ( like ( ( CONCAT ( exprList ( actor0_.firstname actor0_.id firstname ) ' ' ( actor0_.lastname actor0_.id lastname ) ) ) ? ) ( not in ( actor0_.id actor0_.id id ) ( inList ( SELECT ( {select clause} ( actorassoc1_.actor_id ( actorassoc1_.actor_id actorassoc1_.id actor ) id ) ) ( FromClause{level=2} ActorAssociation actorassoc1_ ) ( WHERE ( = ( actorassoc1_.film_id ( actorassoc1_.film_id actorassoc1_.id film ) id ) ? ) ) ) ) ) ) ) )
2023-05-09 10:19:00 DEBUG [main]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity Actor): [Actor]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
    |  | originalText: a
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-MethodNode
          |  |  +-IdentNode
          |  |  | persister: null
          |  |  | originalText: CONCAT
          |  |  \-SqlNode
          |  |     +-DotNode
          |  |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     | path: a.firstname
          |  |     |  +-IdentNode
          |  |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |     |  | originalText: a
          |  |     |  \-IdentNode
          |  |     |    persister: null
          |  |     |    originalText: firstname
          |  |     +-LiteralNode
          |  |     \-DotNode
          |  |       persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |       path: a.lastname
          |  |        +-IdentNode
          |  |        | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
          |  |        | originalText: a
          |  |        \-IdentNode
          |  |          persister: null
          |  |          originalText: lastname
          |  \-ParameterNode
          \-InLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: a.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: a
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-SqlNode
                \-QueryNode
                   +-SelectClause
                   |  \-DotNode
                   |    persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |    path: af.actor.id
                   |     +-DotNode
                   |     | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     | path: af.actor
                   |     |  +-IdentNode
                   |     |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                   |     |  | originalText: af
                   |     |  \-IdentNode
                   |     |    persister: null
                   |     |    originalText: actor
                   |     \-IdentNode
                   |       persister: null
                   |       originalText: id
                   +-FromClause
                   |  \-FromElement
                   \-SqlNode
                      \-BinaryLogicOperatorNode
                         +-DotNode
                         | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         | path: af.film.id
                         |  +-DotNode
                         |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  | path: af.film
                         |  |  +-IdentNode
                         |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
                         |  |  | originalText: af
                         |  |  \-IdentNode
                         |  |    persister: null
                         |  |    originalText: film
                         |  \-IdentNode
                         |    persister: null
                         |    originalText: id
                         \-ParameterNode

2023-05-09 10:19:00 DEBUG [main]: - Using FROM fragment [Actor actor0_]
2023-05-09 10:19:00 DEBUG [main]: - select >> end [level=1, statement=select]
2023-05-09 10:19:00 DEBUG [main]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actor0_.id as id1_0_' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[actor0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Actor actor0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=Actor,tableAlias=actor0_,origin=null,columns={,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[AND] SqlNode: 'AND'
          +-[LIKE] BinaryLogicOperatorNode: 'like'
          |  +-[METHOD_CALL] MethodNode: '('
          |  |  +-[METHOD_NAME] IdentNode: 'CONCAT' {originalText=CONCAT}
          |  |  \-[EXPR_LIST] SqlNode: 'exprList'
          |  |     +-[DOT] DotNode: 'actor0_.firstname' {propertyName=firstname,dereferenceType=PRIMITIVE,getPropertyPath=firstname,path=a.firstname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |     |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |     |  \-[IDENT] IdentNode: 'firstname' {originalText=firstname}
          |  |     +-[QUOTED_STRING] LiteralNode: '' ''
          |  |     \-[DOT] DotNode: 'actor0_.lastname' {propertyName=lastname,dereferenceType=PRIMITIVE,getPropertyPath=lastname,path=a.lastname,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
          |  |        +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
          |  |        \-[IDENT] IdentNode: 'lastname' {originalText=lastname}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=search, expectedType=org.hibernate.type.StringType@367026f}
          \-[NOT_IN] InLogicOperatorNode: 'not in'
             +-[DOT] DotNode: 'actor0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=actor0_,className=org.example.ukrflix.model.Actor,classAlias=a}
             |  +-[ALIAS_REF] IdentNode: 'actor0_.id' {alias=a, className=org.example.ukrflix.model.Actor, tableAlias=actor0_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[IN_LIST] SqlNode: 'inList'
                \-[SELECT] QueryNode: 'SELECT'  querySpaces (Actor,ActorAssociation)
                   +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                   |  \-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=actor.id,path=af.actor.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     +-[DOT] DotNode: 'actorassoc1_.actor_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=actor.id,path=af.actor,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                   |     |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                   |     |  \-[IDENT] IdentNode: 'actor' {originalText=actor}
                   |     \-[IDENT] IdentNode: 'id' {originalText=id}
                   +-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[af], fromElementByTableAlias=[actorassoc1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=af,role=null,tableName=ActorAssociation,tableAlias=actorassoc1_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
                   \-[WHERE] SqlNode: 'WHERE'
                      \-[EQ] BinaryLogicOperatorNode: '='
                         +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=film.id,path=af.film.id,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  +-[DOT] DotNode: 'actorassoc1_.film_id' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=film.id,path=af.film,tableAlias=actorassoc1_,className=org.example.ukrflix.model.ActorAssociation,classAlias=af}
                         |  |  +-[ALIAS_REF] IdentNode: 'actorassoc1_.id' {alias=af, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc1_}
                         |  |  \-[IDENT] IdentNode: 'film' {originalText=film}
                         |  \-[IDENT] IdentNode: 'id' {originalText=id}
                         \-[NAMED_PARAM] ParameterNode: '?' {name=filmId, expectedType=org.hibernate.type.IntegerType@4bb13671}

2023-05-09 10:19:00 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:19:00 DEBUG [main]: - HQL: SELECT a FROM org.example.ukrflix.model.Actor a WHERE (CONCAT(a.firstname,' ',a.lastname) LIKE :search) AND a.id NOT IN (SELECT af.actor.id FROM org.example.ukrflix.model.ActorAssociation af WHERE af.film.id = :filmId)
2023-05-09 10:19:00 DEBUG [main]: - SQL: select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:19:00 DEBUG [main]: - throwQueryException() : no errors
2023-05-09 10:19:00 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:01 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:01 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:01 DEBUG [main]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:02 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:19:02 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:19:02 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:19:02 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:19:02 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:19:02 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:19:02 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:19:02 DEBUG [main]: - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2023-05-09 10:19:02 DEBUG [main]: - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2023-05-09 10:19:02 DEBUG [main]: - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
2023-05-09 10:19:02 DEBUG [main]: - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
2023-05-09 10:19:02 DEBUG [main]: - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
2023-05-09 10:19:02 DEBUG [main]: - Trying to load META-INF/validation.xml for XML based Validator configuration.
2023-05-09 10:19:02 DEBUG [main]: - No META-INF/validation.xml found. Using annotation based configuration only.
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - begin
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Avatar
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 3
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Menu
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 3
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = 
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `price` : value = 22
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `film` : value = 2
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Processing attribute `role` : value = null
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done loading collection
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - committing
2023-05-09 10:19:03 DEBUG [http-nio-8080-exec-1]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Rendered criteria query -> select generatedAlias0 from ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - parse() - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  +-[RANGE] Node: 'RANGE'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  +-[DOT] Node: '.'
    |  |  |  |  |  |  |  +-[IDENT] Node: 'org'
    |  |  |  |  |  |  |  \-[IDENT] Node: 'example'
    |  |  |  |  |  |  \-[IDENT] Node: 'ukrflix'
    |  |  |  |  |  \-[IDENT] Node: 'model'
    |  |  |  |  \-[IDENT] Node: 'ActorAssociation'
    |  |  |  \-[ALIAS] Node: 'generatedAlias0'
    |  |  +-[JOIN] Node: 'join'
    |  |  |  +-[LEFT] Node: 'left'
    |  |  |  +-[DOT] Node: '.'
    |  |  |  |  +-[IDENT] Node: 'generatedAlias0'
    |  |  |  |  \-[IDENT] Node: 'film'
    |  |  |  \-[ALIAS] Node: 'generatedAlias1'
    |  |  \-[JOIN] Node: 'join'
    |  |     +-[LEFT] Node: 'left'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[IDENT] Node: 'generatedAlias0'
    |  |     |  \-[IDENT] Node: 'actor'
    |  |     \-[ALIAS] Node: 'generatedAlias2'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'generatedAlias1'
          |  |  \-[IDENT] Node: 'id'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'param0'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'generatedAlias2'
             |  \-[IDENT] Node: 'id'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'param1'

2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select << begin [level=1, statement=select]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.ActorAssociation (generatedAlias0) -> actorassoc0_
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - getDataType() : film -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Film)
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for film in org.example.ukrflix.model.ActorAssociation (generatedAlias1) parent = [ {null} ]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Film (generatedAlias1) -> film1_
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.film -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=null,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.film -> actorassoc0_.film_id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Film film1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}

2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - getDataType() : actor -> org.hibernate.type.ManyToOneType(org.example.ukrflix.model.Actor)
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - dereferenceEntityJoin() : generating join for actor in org.example.ukrflix.model.ActorAssociation (generatedAlias2) parent = [ {null} ]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - FromClause{level=1} : org.example.ukrflix.model.Actor (generatedAlias2) -> actor2_
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - addJoinByPathMap() : generatedAlias0.actor -> FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=null,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0.actor -> actorassoc0_.actor_id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - createFromJoinElement() : -- join tree --
 \-[JOIN_FRAGMENT] FromElement: 'Actor actor2_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}

2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias0 -> actorassoc0_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1 -> film1_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias1.id -> film1_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2 -> actor2_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - getDataType() : id -> org.hibernate.type.IntegerType@4bb13671
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolved : generatedAlias2.id -> actor2_.id
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select : finishing up [level=1, statement=select]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - processQuery() :  ( SELECT ( {select clause} actorassoc0_.id ) ( FromClause{level=1} ( ActorAssociation actorassoc0_ ( Film film1_ Actor actor2_ ) ) ) ( where ( and ( = ( film1_.id film1_.id id ) ? ) ( = ( actor2_.id actor2_.id id ) ? ) ) ) )
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Tables referenced from query nodes:
 \-QueryNode
    +-SelectClause
    | referencedTables(entity ActorAssociation): [ActorAssociation]
    |  +-IdentNode
    |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.ActorAssociation)
    |  | originalText: generatedAlias0
    |  \-SqlFragment
    +-FromClause
    |  \-FromElement
    |     \-FromElement
    |        \-FromElement
    \-SqlNode
       \-SqlNode
          +-BinaryLogicOperatorNode
          |  +-DotNode
          |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  | path: generatedAlias1.id
          |  |  +-IdentNode
          |  |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Film)
          |  |  | originalText: generatedAlias1
          |  |  \-IdentNode
          |  |    persister: null
          |  |    originalText: id
          |  \-ParameterNode
          \-BinaryLogicOperatorNode
             +-DotNode
             | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             | path: generatedAlias2.id
             |  +-IdentNode
             |  | persister: SingleTableEntityPersister(org.example.ukrflix.model.Actor)
             |  | originalText: generatedAlias2
             |  \-IdentNode
             |    persister: null
             |    originalText: id
             \-ParameterNode

2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [ActorAssociation actorassoc0_]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Film film1_ on actorassoc0_.film_id=film1_.id]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Using FROM fragment [left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select >> end [level=1, statement=select]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Film,Actor,ActorAssociation)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'actorassoc0_.id as id1_1_' {alias=generatedAlias0, className=org.example.ukrflix.model.ActorAssociation, tableAlias=actorassoc0_}
    |  \-[SQL_TOKEN] SqlFragment: 'actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=3, fromElements=3, fromElementByClassAlias=[generatedAlias0, generatedAlias2, generatedAlias1], fromElementByTableAlias=[actor2_, actorassoc0_, film1_], fromElementsByPath=[generatedAlias0.film, generatedAlias0.actor], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ActorAssociation actorassoc0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=ActorAssociation,tableAlias=actorassoc0_,origin=null,columns={,className=org.example.ukrflix.model.ActorAssociation}}
    |     \-[JOIN_FRAGMENT] FromElement: 'left outer join Film film1_ on actorassoc0_.film_id=film1_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias1,role=org.example.ukrflix.model.ActorAssociation.film,tableName=Film,tableAlias=film1_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.film_id,className=org.example.ukrflix.model.Film}}
    |        \-[JOIN_FRAGMENT] FromElement: 'left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias2,role=org.example.ukrflix.model.ActorAssociation.actor,tableName=Actor,tableAlias=actor2_,origin=ActorAssociation actorassoc0_,columns={actorassoc0_.actor_id,className=org.example.ukrflix.model.Actor}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'film1_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias1.id,tableAlias=film1_,className=org.example.ukrflix.model.Film,classAlias=generatedAlias1}
          |  |  +-[ALIAS_REF] IdentNode: 'film1_.id' {alias=generatedAlias1, className=org.example.ukrflix.model.Film, tableAlias=film1_}
          |  |  \-[IDENT] IdentNode: 'id' {originalText=id}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.IntegerType@4bb13671}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'actor2_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=generatedAlias2.id,tableAlias=actor2_,className=org.example.ukrflix.model.Actor,classAlias=generatedAlias2}
             |  +-[ALIAS_REF] IdentNode: 'actor2_.id' {alias=generatedAlias2, className=org.example.ukrflix.model.Actor, tableAlias=actor2_}
             |  \-[IDENT] IdentNode: 'id' {originalText=id}
             \-[NAMED_PARAM] ParameterNode: '?' {name=param1, expectedType=org.hibernate.type.IntegerType@4bb13671}

2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - HQL: select generatedAlias0 from org.example.ukrflix.model.ActorAssociation as generatedAlias0 left join generatedAlias0.film as generatedAlias1 left join generatedAlias0.actor as generatedAlias2 where ( generatedAlias1.id=:param0 ) and ( generatedAlias2.id=:param1 )
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - SQL: select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - throwQueryException() : no errors
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_, actorassoc0_.actor_id as actor_id3_1_, actorassoc0_.film_id as film_id4_1_, actorassoc0_.role as role2_1_ from ActorAssociation actorassoc0_ left outer join Film film1_ on actorassoc0_.film_id=film1_.id left outer join Actor actor2_ on actorassoc0_.actor_id=actor2_.id where film1_.id=? and actor2_.id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select actor0_.id as id1_0_0_, actor0_.birthday as birthday2_0_0_, actor0_.firstname as firstnam3_0_0_, actor0_.lastname as lastname4_0_0_, films1_.actor_id as actor_id3_1_1_, film2_.id as film_id4_1_1_, film2_.id as id1_2_2_, film2_.description as descript2_2_2_, film2_.img_src as img_src3_2_2_, film2_.name as name4_2_2_, film2_.price as price5_2_2_, film2_.release_date as release_6_2_2_, film2_.yt_src as yt_src7_2_2_ from Actor actor0_ left outer join ActorAssociation films1_ on actor0_.id=films1_.actor_id left outer join Film film2_ on films1_.film_id=film2_.id where actor0_.id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done entity load : org.example.ukrflix.model.Actor#1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 3
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - begin
2023-05-09 10:19:06 DEBUG [http-nio-8080-exec-2]: - Configured EntityCopyObserver strategy: disallow
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Static select for action ACTION_MERGE on entity org.example.ukrflix.model.ActorAssociation: select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading entity: [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.id as id1_1_2_, actorassoc0_.actor_id as actor_id3_1_2_, actorassoc0_.film_id as film_id4_1_2_, actorassoc0_.role as role2_1_2_, actor1_.id as id1_0_0_, actor1_.birthday as birthday2_0_0_, actor1_.firstname as firstnam3_0_0_, actor1_.lastname as lastname4_0_0_, film2_.id as id1_2_1_, film2_.description as descript2_2_1_, film2_.img_src as img_src3_2_1_, film2_.name as name4_2_1_, film2_.price as price5_2_1_, film2_.release_date as release_6_2_1_, film2_.yt_src as yt_src7_2_1_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id left outer join Film film2_ on actorassoc0_.film_id=film2_.id where actorassoc0_.id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Result set row: 0
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Result row: EntityKey[org.example.ukrflix.model.Actor#1], EntityKey[org.example.ukrflix.model.Film#1], EntityKey[org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Avatar
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 3
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Menu
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 3
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `price` : value = 22
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `film` : value = 2
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing attribute `role` : value = null
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Done entity load
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=9, role=''}, ActorAssociation{id=10, role=''}, ActorAssociation{id=11, role=''}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=9, role=''}, ActorAssociation{id=10, role=''}, ActorAssociation{id=11, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=9, role=''}, ActorAssociation{id=10, role=''}, ActorAssociation{id=11, role=''}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [ActorAssociation{id=2, role='null'}] for CollectionEntry[org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Reset storedSnapshot to [Film{id=1, name='Avatar', release_date=2021-03-04, price=22, actorAssociations=[ActorAssociation{id=9, role=''}, ActorAssociation{id=10, role=''}, ActorAssociation{id=11, role=''}]}, Film{id=2, name='Fast & Furious', release_date=2001-10-18, price=22, actorAssociations=[ActorAssociation{id=2, role='null'}]}, Film{id=3, name='Menu', release_date=2022-11-17, price=22, actorAssociations=[ActorAssociation{id=5, role='null'}, ActorAssociation{id=6, role=''}]}] for CollectionEntry[org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - committing
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Processing flush-time cascades
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Dirty checking collections
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#1], was: [org.example.ukrflix.model.Actor.films#1] (initialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#1], was: [org.example.ukrflix.model.Film.actorAssociations#1] (initialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#1], was: [org.example.ukrflix.model.Film.purchases#1] (uninitialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#2], was: [org.example.ukrflix.model.Actor.films#2] (initialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Actor.films#3], was: [org.example.ukrflix.model.Actor.films#3] (initialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#3], was: [org.example.ukrflix.model.Film.actorAssociations#3] (initialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#3], was: [org.example.ukrflix.model.Film.purchases#3] (uninitialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.actorAssociations#2], was: [org.example.ukrflix.model.Film.actorAssociations#2] (initialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Collection found: [org.example.ukrflix.model.Film.purchases#2], was: [org.example.ukrflix.model.Film.purchases#2] (uninitialized)
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 insertions, 0 updates, 0 deletions to 12 objects
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Flushed: 0 (re)creations, 0 updates, 0 removals to 9 collections
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - Listing entities:
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1975-07-04, films=[org.example.ukrflix.model.Film#1], firstname=Angelina, id=3, lastname=jolie}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=6, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1963-12-18, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#3], firstname=Brad, id=2, lastname=Pitt}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#5, org.example.ukrflix.model.ActorAssociation#6], purchases=<uninitialized>, release_date=2022-11-17, price=22, name=Menu, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=Kx55Rkynhtk, id=3, img_src=https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=5, film=org.example.ukrflix.model.Film#3}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Actor{birthday=1956-07-09, films=[org.example.ukrflix.model.Film#1, org.example.ukrflix.model.Film#2, org.example.ukrflix.model.Film#3], firstname=Tom, id=1, lastname=Hanks}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#2, role=, id=10, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=, id=9, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#3, role=, id=11, film=org.example.ukrflix.model.Film#1}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#2], purchases=<uninitialized>, release_date=2001-10-18, price=22, name=Fast & Furious, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=2TAOizOnNPo, id=2, img_src=https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.Film{actorAssociations=[org.example.ukrflix.model.ActorAssociation#9, org.example.ukrflix.model.ActorAssociation#10, org.example.ukrflix.model.ActorAssociation#11], purchases=<uninitialized>, release_date=2021-03-04, price=22, name=Avatar, description={"en": "Description in English", "uk": "опис українською"}, yt_src=https://www.youtube.com/watch?v=d9MyW72ELq0, id=1, img_src=https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-2]: - org.example.ukrflix.model.ActorAssociation{actor=org.example.ukrflix.model.Actor#1, role=null, id=2, film=org.example.ukrflix.model.Film#2}
2023-05-09 10:19:07 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - begin
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select film0_.id as id1_2_0_, film0_.description as descript2_2_0_, film0_.img_src as img_src3_2_0_, film0_.name as name4_2_0_, film0_.price as price5_2_0_, film0_.release_date as release_6_2_0_, film0_.yt_src as yt_src7_2_0_, actorassoc1_.film_id as film_id4_1_1_, actorassoc1_.id as id1_1_1_, actorassoc1_.id as id1_1_2_, actorassoc1_.actor_id as actor_id3_1_2_, actorassoc1_.film_id as film_id4_1_2_, actorassoc1_.role as role2_1_2_, actor2_.id as id1_0_3_, actor2_.birthday as birthday2_0_3_, actor2_.firstname as firstnam3_0_3_, actor2_.lastname as lastname4_0_3_ from Film film0_ left outer join ActorAssociation actorassoc1_ on film0_.id=actorassoc1_.film_id left outer join Actor actor2_ on actorassoc1_.actor_id=actor2_.id where film0_.id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/M/MV5BZDA0OGQxNTItMDZkMC00N2UyLTg3MzMtYTJmNjg3Nzk5MzRiXkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_.jpg
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Avatar
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2021-03-04
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=d9MyW72ELq0
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#9]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1956-07-09
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Tom
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Hanks
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#10]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1963-12-18
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Brad
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = Pitt
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 3
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#11]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `birthday` : value = 1975-07-04
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`birthday`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `films` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`films`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `firstname` : value = Angelina
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`firstname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `lastname` : value = jolie
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`lastname`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Actor#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://de.web.img2.acsta.net/pictures/22/09/22/09/26/2379387.jpg
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Menu
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2022-11-17
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=Kx55Rkynhtk
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#5]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 2
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 3
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = 
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#6]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#3]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select films0_.actor_id as actor_id3_1_0_, films0_.film_id as film_id4_1_0_, film1_.id as id1_2_1_, film1_.description as descript2_2_1_, film1_.img_src as img_src3_2_1_, film1_.name as name4_2_1_, film1_.price as price5_2_1_, film1_.release_date as release_6_2_1_, film1_.yt_src as yt_src7_2_1_ from ActorAssociation films0_ inner join Film film1_ on films0_.film_id=film1_.id where films0_.actor_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actorAssociations` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actorAssociations`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `description` : value = {"en": "Description in English", "uk": "опис українською"}
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`description`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `img_src` : value = https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71qtDoM-rcL._SL1200_.jpg
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`img_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `name` : value = Fast & Furious
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`name`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `price` : value = 22
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`price`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `purchases` : value = NOT NULL COLLECTION
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`purchases`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `release_date` : value = 2001-10-18
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`release_date`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `yt_src` : value = https://www.youtube.com/watch?v=2TAOizOnNPo
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`yt_src`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.Film#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Actor.films#1]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Actor.films
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Loading collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select actorassoc0_.film_id as film_id4_1_0_, actorassoc0_.id as id1_1_0_, actorassoc0_.id as id1_1_1_, actorassoc0_.actor_id as actor_id3_1_1_, actorassoc0_.film_id as film_id4_1_1_, actorassoc0_.role as role2_1_1_, actor1_.id as id1_0_2_, actor1_.birthday as birthday2_0_2_, actor1_.firstname as firstnam3_0_2_, actor1_.lastname as lastname4_0_2_ from ActorAssociation actorassoc0_ left outer join Actor actor1_ on actorassoc0_.actor_id=actor1_.id where actorassoc0_.film_id=?
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Preparing collection initializer : [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Found row of collection: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Resolving attributes for [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `actor` : value = 1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`actor`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `film` : value = 2
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`film`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Processing attribute `role` : value = null
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Attribute (`role`)  - enhanced for lazy-loading? - false
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done materializing entity [org.example.ukrflix.model.ActorAssociation#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections were found in result set for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Collection fully initialized: [org.example.ukrflix.model.Film.actorAssociations#2]
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - 1 collections initialized for role: org.example.ukrflix.model.Film.actorAssociations
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done loading collection
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - Done entity load : org.example.ukrflix.model.Film#1
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - committing
2023-05-09 10:19:07 DEBUG [http-nio-8080-exec-3]: - select actor0_.id as id1_0_, actor0_.birthday as birthday2_0_, actor0_.firstname as firstnam3_0_, actor0_.lastname as lastname4_0_ from Actor actor0_ where (concat(actor0_.firstname, ' ', actor0_.lastname) like ?) and (actor0_.id not in  (select actorassoc1_.actor_id from ActorAssociation actorassoc1_ where actorassoc1_.film_id=?))
2023-05-09 10:20:01 INFO  [http-nio-8080-exec-1]: - deleted successfully
2023-05-09 10:20:51 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:21:35 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-05-09 10:21:40 INFO  [http-nio-8080-exec-5]: - actor id = 1 was added successfully
2023-05-09 10:22:39 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:22:43 INFO  [http-nio-8080-exec-5]: - actor id = 3 was added successfully
2023-05-09 10:23:26 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-05-09 10:23:32 INFO  [http-nio-8080-exec-5]: - actor id = 2 was added successfully
2023-05-09 10:39:36 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 10:42:14 INFO  [http-nio-8080-exec-2]: - deleted successfully
2023-05-09 11:25:13 INFO  [http-nio-8080-exec-5]: - actor id = 1 was added successfully
2023-05-09 11:43:30 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 11:44:24 INFO  [http-nio-8080-exec-4]: - entered /newActor
2023-05-09 11:47:33 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 11:51:47 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-09 12:17:28 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-05-09 12:40:46 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 12:41:27 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-09 13:04:13 INFO  [http-nio-8080-exec-3]: - Redirect from / to the /catalog path
2023-05-09 13:04:13 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-09 13:04:13 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 22:30:36 INFO  [http-nio-8080-exec-3]: - Redirect from / to the /catalog path
2023-05-09 22:30:37 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-09 22:30:42 INFO  [http-nio-8080-exec-5]: - entered /newActor
2023-05-09 22:30:54 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-09 22:32:35 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 22:33:47 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-09 22:34:59 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 22:35:03 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-09 22:35:25 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-09 22:35:45 INFO  [http-nio-8080-exec-7]: - entered /newActor
2023-05-09 22:40:42 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 22:42:30 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 22:43:31 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-09 22:43:37 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-05-09 22:51:59 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-09 22:52:11 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-09 22:52:14 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-09 22:53:07 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-09 22:53:15 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-09 22:53:21 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-09 22:54:36 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-09 22:54:36 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-09 22:54:39 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-09 22:55:18 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-09 22:55:24 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-09 22:56:00 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-09 22:56:24 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-09 22:56:28 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-09 22:56:30 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-09 22:56:30 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-09 22:56:32 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-09 22:56:54 INFO  [http-nio-8080-exec-10]: - Entered /user/profile
2023-05-09 22:56:54 INFO  [http-nio-8080-exec-10]: - find user by login = null
2023-05-09 22:56:54 INFO  [http-nio-8080-exec-9]: - Entered /login
2023-05-09 22:56:56 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-05-09 22:56:57 INFO  [http-nio-8080-exec-1]: - Entered /user/purchases
2023-05-09 22:56:57 INFO  [http-nio-8080-exec-1]: - find user by login = null
2023-05-09 22:56:57 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-05-09 22:56:58 INFO  [http-nio-8080-exec-4]: - Enter /user/topUP
2023-05-09 22:56:58 INFO  [http-nio-8080-exec-4]: - find user by login = null
2023-05-09 22:56:58 INFO  [http-nio-8080-exec-5]: - Entered /login
2023-05-09 22:57:00 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-09 22:57:02 INFO  [http-nio-8080-exec-6]: - entered /newActor
2023-05-10 09:20:08 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-10 09:20:08 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-10 09:20:21 INFO  [http-nio-8080-exec-5]: - get all actor by id
2023-05-10 09:21:18 INFO  [http-nio-8080-exec-1]: - get all actor by id
2023-05-10 09:22:24 INFO  [http-nio-8080-exec-5]: - get all actor by id
2023-05-10 09:23:32 INFO  [http-nio-8080-exec-1]: - get all actor by id
2023-05-10 09:24:30 INFO  [http-nio-8080-exec-1]: - get all actor by id
2023-05-10 09:24:38 INFO  [http-nio-8080-exec-2]: - get all actor by id
2023-05-10 09:27:14 INFO  [http-nio-8080-exec-1]: - get all actor by id
2023-05-10 09:33:03 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 09:40:45 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-10 09:42:12 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 09:55:24 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:00:10 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:01:50 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:04:53 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-10 10:05:45 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:07:20 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:10:06 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:12:55 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-10 10:16:09 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:17:35 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:18:43 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-10 10:20:19 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-10 10:22:55 INFO  [http-nio-8080-exec-3]: - Entered /login
2023-05-10 10:22:59 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-05-10 10:23:00 INFO  [http-nio-8080-exec-2]: - user was logged successfully
2023-05-10 10:23:00 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-10 10:23:01 INFO  [http-nio-8080-exec-6]: - Entered /user/purchases
2023-05-10 10:23:01 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-05-10 10:23:05 INFO  [http-nio-8080-exec-7]: - User login = user have not enough money
2023-05-10 10:23:05 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-05-10 10:23:13 INFO  [http-nio-8080-exec-9]: - Enter /user/topUP
2023-05-10 10:23:13 INFO  [http-nio-8080-exec-9]: - find user by login = user
2023-05-10 10:23:15 INFO  [http-nio-8080-exec-10]: - find user by login = user
2023-05-10 10:24:11 INFO  [http-nio-8080-exec-1]: - find user by login = null
2023-05-10 10:24:11 INFO  [http-nio-8080-exec-2]: - Entered /login
2023-05-10 10:24:26 INFO  [http-nio-8080-exec-3]: - find user by login = user
2023-05-10 10:24:27 INFO  [http-nio-8080-exec-3]: - user was logged successfully
2023-05-10 10:24:27 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-10 10:24:29 INFO  [http-nio-8080-exec-5]: - Entered /user/purchases
2023-05-10 10:24:29 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-05-10 10:24:31 INFO  [http-nio-8080-exec-6]: - Enter /user/topUP
2023-05-10 10:24:31 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-05-10 10:24:33 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-05-10 10:28:42 INFO  [http-nio-8080-exec-2]: - Enter /user/topUP
2023-05-10 10:28:42 INFO  [http-nio-8080-exec-2]: - find user by login = null
2023-05-10 10:28:42 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-05-10 10:28:48 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-05-10 10:28:48 INFO  [http-nio-8080-exec-4]: - user was logged successfully
2023-05-10 10:28:48 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-10 10:28:51 INFO  [http-nio-8080-exec-7]: - Entered /user/purchases
2023-05-10 10:28:51 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-05-10 10:28:53 INFO  [http-nio-8080-exec-8]: - Enter /user/topUP
2023-05-10 10:28:53 INFO  [http-nio-8080-exec-8]: - find user by login = user
2023-05-10 10:28:55 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-05-10 10:29:50 INFO  [http-nio-8080-exec-9]: - Enter /user/topUP
2023-05-10 10:29:50 INFO  [http-nio-8080-exec-9]: - find user by login = user
2023-05-10 10:29:52 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-05-10 10:30:26 INFO  [http-nio-8080-exec-10]: - Enter /user/topUP
2023-05-10 10:30:26 INFO  [http-nio-8080-exec-10]: - find user by login = user
2023-05-10 10:30:28 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-05-10 10:30:28 INFO  [http-nio-8080-exec-2]: - account was replenished successfully, account+=1
2023-05-10 10:30:28 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-10 10:30:30 INFO  [http-nio-8080-exec-4]: - Enter /user/topUP
2023-05-10 10:30:30 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-05-10 10:30:35 INFO  [http-nio-8080-exec-3]: - Enter /user/topUP
2023-05-10 10:30:35 INFO  [http-nio-8080-exec-3]: - find user by login = user
2023-05-10 10:30:37 INFO  [http-nio-8080-exec-7]: - find user by login = user
2023-05-10 10:30:37 INFO  [http-nio-8080-exec-7]: - account was replenished successfully, account+=3333
2023-05-10 10:30:37 INFO  [http-nio-8080-exec-8]: - Enter /catalog
2023-05-10 10:30:39 INFO  [http-nio-8080-exec-5]: - Film 1 was added by the user login = user
2023-05-10 10:30:39 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-05-10 10:30:41 INFO  [http-nio-8080-exec-6]: - Entered /user/purchases
2023-05-10 10:30:41 INFO  [http-nio-8080-exec-6]: - find user by login = user
2023-05-10 10:33:45 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-05-10 10:33:51 INFO  [http-nio-8080-exec-4]: - find user by login = user
2023-05-10 10:33:52 INFO  [http-nio-8080-exec-4]: - user was logged successfully
2023-05-10 10:33:52 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-10 10:33:56 INFO  [http-nio-8080-exec-2]: - Enter /user/topUP
2023-05-10 10:33:56 INFO  [http-nio-8080-exec-2]: - find user by login = user
2023-05-10 10:33:58 INFO  [http-nio-8080-exec-5]: - find user by login = user
2023-05-10 10:33:59 INFO  [http-nio-8080-exec-5]: - account was replenished successfully, account+=22
2023-05-10 10:33:59 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-10 10:37:40 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-10 10:40:17 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-11 08:47:37 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-05-11 08:47:38 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-11 08:47:47 INFO  [http-nio-8080-exec-5]: - get actor by id
2023-05-11 09:40:52 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-11 12:12:47 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-11 12:12:51 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-12 10:02:49 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-12 10:02:49 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-12 10:02:57 INFO  [http-nio-8080-exec-6]: - Entered /registration
2023-05-12 10:03:16 INFO  [http-nio-8080-exec-5]: - find user by login = admin
2023-05-12 10:03:29 INFO  [http-nio-8080-exec-9]: - find user by login = admin
2023-05-12 10:13:40 INFO  [http-nio-8080-exec-2]: - find user by login = admin
2023-05-12 10:13:41 INFO  [http-nio-8080-exec-2]: - addedorg.example.ukrflix.model.User@7f3363c
2023-05-12 10:13:41 INFO  [http-nio-8080-exec-2]: - user was added successfully
2023-05-12 10:13:41 INFO  [http-nio-8080-exec-2]: - redirect /login
2023-05-12 10:13:41 INFO  [http-nio-8080-exec-1]: - Entered /login
2023-05-12 10:13:49 INFO  [http-nio-8080-exec-3]: - find user by login = admin
2023-05-12 10:13:57 INFO  [http-nio-8080-exec-5]: - find user by login = admin
2023-05-12 10:14:03 INFO  [http-nio-8080-exec-4]: - find user by login = admin
2023-05-12 10:16:24 INFO  [http-nio-8080-exec-2]: - find user by login = admin
2023-05-12 10:16:31 INFO  [http-nio-8080-exec-1]: - find user by login = admin
2023-05-12 10:19:06 INFO  [http-nio-8080-exec-1]: - find user by login = admin
2023-05-12 10:19:20 INFO  [http-nio-8080-exec-2]: - find user by login = admin
2023-05-12 10:29:15 INFO  [http-nio-8080-exec-1]: - Entered /registration
2023-05-12 10:29:35 INFO  [http-nio-8080-exec-2]: - find user by login = admin
2023-05-12 10:30:35 INFO  [http-nio-8080-exec-5]: - find user by login = admin2
2023-05-12 10:38:11 INFO  [main]: - addedorg.example.ukrflix.model.User@790132f7
2023-05-12 10:38:11 INFO  [main]: - update user id:2
2023-05-12 10:38:11 INFO  [main]: - find user by login = user
2023-05-12 10:38:48 INFO  [main]: - addedorg.example.ukrflix.model.User@790132f7
2023-05-12 10:38:48 INFO  [main]: - update user id:2
2023-05-12 10:38:48 INFO  [main]: - find user by login = user
2023-05-12 10:44:03 INFO  [main]: - user was added successfully
2023-05-12 10:44:03 INFO  [main]: - redirect /login
2023-05-12 10:44:30 INFO  [main]: - Entered /registration
2023-05-12 10:45:47 INFO  [main]: - user was added successfully
2023-05-12 10:45:47 INFO  [main]: - redirect /login
2023-05-12 10:47:10 INFO  [main]: - Entered /registration
2023-05-12 10:47:39 INFO  [main]: - Entered /registration
2023-05-12 10:48:12 INFO  [main]: - Entered /registration
2023-05-12 10:55:26 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-05-12 11:02:23 INFO  [main]: - user was added successfully
2023-05-12 11:02:23 INFO  [main]: - redirect /login
2023-05-12 11:02:47 INFO  [main]: - user was added successfully
2023-05-12 11:02:47 INFO  [main]: - redirect /login
2023-05-12 11:07:05 INFO  [main]: - Film Avatar was added
2023-05-12 11:11:30 INFO  [main]: - problem
2023-05-12 11:13:25 INFO  [main]: - problem
2023-05-12 11:13:35 INFO  [main]: - problem
2023-05-12 11:23:03 INFO  [main]: - user was logged successfully
2023-05-12 12:00:24 INFO  [main]: - user was logged successfully
2023-05-12 12:02:28 INFO  [main]: - user was logged successfully
2023-05-12 12:14:53 INFO  [main]: - this user doesn't exist
2023-05-12 12:15:15 INFO  [main]: - this user doesn't exist
2023-05-12 12:16:27 INFO  [main]: - user was logged successfully
2023-05-12 12:19:07 INFO  [main]: - user was logged successfully
2023-05-12 12:19:20 INFO  [main]: - user was logged successfully
2023-05-12 12:19:33 INFO  [main]: - user was logged successfully
2023-05-13 14:35:14 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-13 14:35:15 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-13 14:35:24 INFO  [http-nio-8080-exec-4]: - get actor by id
2023-05-13 14:35:26 INFO  [http-nio-8080-exec-5]: - get actor by id
2023-05-13 14:35:30 INFO  [http-nio-8080-exec-6]: - get actor by id
2023-05-13 14:36:34 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-13 14:36:38 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-13 14:37:54 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-13 14:37:58 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-13 14:38:41 INFO  [http-nio-8080-exec-6]: - get all actors
2023-05-13 14:41:10 INFO  [http-nio-8080-exec-1]: - get all actors
2023-05-13 14:43:29 INFO  [http-nio-8080-exec-3]: - get actor by id
2023-05-13 14:43:35 INFO  [http-nio-8080-exec-5]: - get actor by id
2023-05-13 14:43:42 INFO  [http-nio-8080-exec-4]: - get actor by id
2023-05-13 14:43:42 INFO  [http-nio-8080-exec-7]: - get actor by id
2023-05-13 14:44:17 INFO  [http-nio-8080-exec-9]: - Enter /catalog
2023-05-13 14:44:29 INFO  [http-nio-8080-exec-1]: - actor id = 3 was added successfully
2023-05-13 14:44:33 INFO  [http-nio-8080-exec-3]: - deleted successfully
2023-05-13 14:47:18 INFO  [http-nio-8080-exec-7]: - get all actors
2023-05-13 14:48:09 INFO  [http-nio-8080-exec-9]: - get actor by id
2023-05-13 14:48:26 INFO  [http-nio-8080-exec-10]: - Enter /catalog
2023-05-13 14:51:20 INFO  [http-nio-8080-exec-2]: - get actor by id
2023-05-13 14:53:53 INFO  [http-nio-8080-exec-2]: - get all actors
2023-05-13 15:35:20 INFO  [main]: - addedorg.example.ukrflix.model.User@790132f7
2023-05-13 15:35:20 INFO  [main]: - update user id:2
2023-05-13 15:35:20 INFO  [main]: - find user by login = user
2023-05-13 16:15:16 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-13 16:15:16 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-13 16:15:31 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-13 16:15:34 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-13 16:17:36 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-13 16:17:42 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-13 17:27:08 INFO  [main]: - Entered /registration
2023-05-13 17:31:22 INFO  [main]: - user was added successfully
2023-05-13 17:31:22 INFO  [main]: - redirect /login
2023-05-13 17:33:51 INFO  [main]: - entered /newActor
2023-05-13 17:37:03 INFO  [main]: - entered /newActor
2023-05-13 17:37:20 INFO  [main]: - entered /newActor
2023-05-13 17:38:17 INFO  [main]: - Entered /registration
2023-05-13 17:40:11 INFO  [main]: - Entered /registration
2023-05-13 17:41:24 INFO  [main]: - Entered /registration
2023-05-13 19:59:21 INFO  [main]: - get all actors
2023-05-13 19:59:50 INFO  [main]: - get all actors
2023-05-13 20:00:33 INFO  [main]: - get actor by id
2023-05-13 20:01:37 INFO  [main]: - Entered /new_film
2023-05-13 20:13:37 INFO  [main]: - User login = null have not enough money
2023-05-13 20:14:14 INFO  [main]: - User login = null have not enough money
2023-05-13 20:14:21 INFO  [main]: - problem
2023-05-13 20:16:48 INFO  [main]: - Entered /login
2023-05-13 20:17:07 INFO  [main]: - Entered /login
2023-05-13 20:17:21 INFO  [main]: - Entered /login
2023-05-13 20:18:42 INFO  [main]: - Enter /catalog
2023-05-13 20:25:18 INFO  [main]: - Enter /catalog
2023-05-13 20:26:27 INFO  [main]: - Redirect from / to the /catalog path
2023-05-13 20:26:58 INFO  [main]: - Enter /user/topUP
2023-05-13 20:28:34 INFO  [main]: - Enter /user/topUP
2023-05-13 20:28:59 INFO  [main]: - Enter /user/topUP
2023-05-13 20:30:38 INFO  [main]: - Enter /user/topUP
2023-05-13 20:31:53 INFO  [main]: - Enter /user/topUP
2023-05-13 20:32:30 INFO  [main]: - Enter /user/topUP
2023-05-13 20:33:12 INFO  [main]: - Entered /user/purchases
2023-05-13 20:33:46 INFO  [main]: - Entered /user/profile
2023-05-13 20:36:35 INFO  [main]: - Entered /user/profile
2023-05-13 20:39:44 INFO  [http-nio-8080-exec-1]: - Redirect from / to the /catalog path
2023-05-13 20:39:44 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-13 20:39:48 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-13 20:39:49 INFO  [http-nio-8080-exec-6]: - Enter /catalog
2023-05-13 20:40:41 INFO  [http-nio-8080-exec-8]: - get all actors
2023-05-13 20:40:42 INFO  [http-nio-8080-exec-9]: - entered /newActor
2023-05-13 20:40:43 INFO  [http-nio-8080-exec-5]: - get all actors
2023-05-13 20:41:10 INFO  [http-nio-8080-exec-1]: - get actor by id
2023-05-13 20:41:40 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-05-13 20:42:08 INFO  [http-nio-8080-exec-4]: - get all actors
2023-05-13 20:42:17 INFO  [http-nio-8080-exec-7]: - Enter /catalog
2023-05-15 11:10:12 INFO  [http-nio-8080-exec-2]: - Redirect from / to the /catalog path
2023-05-15 11:10:12 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-15 11:32:07 INFO  [http-nio-8080-exec-2]: - get all actors
2023-05-15 11:32:22 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-05-15 11:32:44 INFO  [http-nio-8080-exec-6]: - get all actors
2023-05-15 11:40:23 INFO  [http-nio-8080-exec-3]: - Enter /catalog
2023-05-15 11:49:15 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-15 11:59:43 INFO  [http-nio-8080-exec-2]: - Entered /new_film
2023-05-15 12:01:23 INFO  [http-nio-8080-exec-1]: - Entered /new_film
2023-05-15 12:01:27 INFO  [http-nio-8080-exec-3]: - entered /newActor
2023-05-15 12:11:10 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-15 12:15:14 INFO  [http-nio-8080-exec-1]: - entered /newActor
2023-05-15 12:19:46 ERROR [http-nio-8080-exec-1]: - Column 'birthday' cannot be null
2023-05-15 12:22:58 ERROR [http-nio-8080-exec-1]: - Column 'birthday' cannot be null
2023-05-15 17:47:31 INFO  [http-nio-8080-exec-1]: - get all actors
2023-05-15 17:47:34 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-15 17:47:37 INFO  [http-nio-8080-exec-4]: - Entered /new_film
2023-05-15 17:47:38 INFO  [http-nio-8080-exec-5]: - entered /newActor
2023-05-15 17:47:46 ERROR [http-nio-8080-exec-3]: - Column 'birthday' cannot be null
2023-05-15 17:49:08 ERROR [http-nio-8080-exec-7]: - Column 'birthday' cannot be null
2023-05-15 17:52:35 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-15 17:55:58 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-15 17:57:39 INFO  [http-nio-8080-exec-1]: - get all actors
2023-05-15 17:57:40 INFO  [http-nio-8080-exec-2]: - entered /newActor
2023-05-15 17:57:49 INFO  [http-nio-8080-exec-4]: - Enter /catalog
2023-05-15 18:06:33 INFO  [http-nio-8080-exec-5]: - Enter /catalog
2023-05-15 19:36:09 INFO  [http-nio-8080-exec-2]: - Enter /catalog
2023-05-15 19:37:34 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-15 19:38:38 INFO  [http-nio-8080-exec-1]: - Enter /catalog
2023-05-15 19:54:26 INFO  [http-nio-8080-exec-1]: - Enter /catalog
